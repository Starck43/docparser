import json
from pathlib import Path
from typing import Optional

import typer
from rich.table import Table

from app.config import settings
from app.crud import get_documents, get_documents_with_errors, get_documents_count, delete_all_documents
from app.db import get_db
from app.services.export import export_to_xls_with_months
from app.services.files import display_files_tree
from app.services.parser import main_file_parser
from app.utils.base import get_current_year
from app.utils.console import confirm_prompt, console, print_error, print_success

app = typer.Typer(help="üìÑ CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–∏–±–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏")


@app.command()
def parse(
		data_dir: Optional[Path] = typer.Option(None, help="–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"),
		year: Optional[int] = typer.Option(get_current_year(), help="–ì–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		limit: int = typer.Option(settings.MAX_FILES_TO_PROCESS, help="–õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (0 = –≤—Å–µ)"),
		dry_run: bool = typer.Option(False, help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"),
		batch_size: int = typer.Option(
			settings.CONSOLE_OUTPUT_BATCH_SIZE,
			help=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.CONSOLE_OUTPUT_BATCH_SIZE})"
		)
):
	"""–ü–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""

	files = display_files_tree(data_dir, max_display=batch_size)

	if confirm_prompt("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥?", default=True):
		documents = main_file_parser(files[:limit], year, not dry_run, batch_size)
		console.print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}", style="green")


@app.command()
def export(
		year: Optional[int] = typer.Option(get_current_year(), help="–ì–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		output_dir: Optional[Path] = typer.Option(None, help="–ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"),
		limit: int = typer.Option(0, help="–õ–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (0 = –≤—Å–µ)"),
		dry_run: bool = typer.Option(False, "--dry-run", help="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"),
		max_per_file: int = typer.Option(
			settings.MAX_DOCUMENTS_PER_EXPORT_FILE,
			help=f"–ú–∞–∫—Å–∏–º—É–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.MAX_DOCUMENTS_PER_EXPORT_FILE})"
		),
		force: bool = typer.Option(
			False,
			"--force",
			help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"
		)
):
	"""–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XLSX —Ñ–∞–π–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏"""

	with next(get_db()) as db:
		documents = get_documents(db, year=year, limit=limit)

		if not documents:
			print_error(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {year} –≥–æ–¥")
			return

		# DRY-RUN –†–ï–ñ–ò–ú
		if dry_run:
			from app.services.preview import preview_export_data
			console.print("** –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê **", style="bold yellow")
			preview_export_data(list(documents), year)
			return

		# –†–ï–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢
		export_dir = output_dir or settings.EXPORT_DIR
		export_dir.mkdir(exist_ok=True)

		# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º —É–∫–∞–∑–∞–Ω–æ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
		if 0 < max_per_file < len(documents):
			console.print(f"üì¶ –†–∞–∑–±–∏–≤–∞–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ {max_per_file}", style="yellow")
			export_paths = []

			for i in range(0, len(documents), max_per_file):
				batch_docs = documents[i:i + max_per_file]
				part_num = i // max_per_file + 1
				postfix = f"-part{part_num:02d}"

				export_path = export_to_xls_with_months(
					list(batch_docs), year, export_dir, postfix, force
				)
				export_paths.append(export_path)
				console.print(f"‚úÖ –ß–∞—Å—Ç—å {part_num}: {export_path.name}")

			console.print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(export_paths)}", style="green")
			return export_paths
		else:
			export_path = export_to_xls_with_months(list(documents), year, export_dir, "", force)

			console.print("\n" + "=" * 80, style="dim")
			print_success(f"–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: [cyan]{len(documents)}[/cyan]")
			console.print("üìÇ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª XLSX:", style="bold")
			console.print(f"üìç [link=file://{export_path}]{export_path}[/link]", style="blue underline")
			console.print("=" * 80, style="dim")

			return [export_path]


@app.command()
def errors(
		year: Optional[int] = typer.Option(get_current_year(), help="–ì–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		limit: int = typer.Option(10, help="–õ–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞")
):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
	with next(get_db()) as db:
		error_docs = get_documents_with_errors(db, year=year, limit=limit)

		if not error_docs:
			console.print("‚úÖ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏", style="green")
			return

		table = Table(title="üìã –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏")
		table.add_column("–§–∞–π–ª", style="cyan")
		table.add_column("–û—à–∏–±–∫–∏", style="red")

		for doc in error_docs:
			errors_list = json.loads(doc.validation_errors) if doc.validation_errors else []
			table.add_row(str(doc.file_path), "\n".join(errors_list))

		console.print(table)


@app.command()
def stats(
		year: Optional[int] = typer.Option(get_current_year(), help="–ì–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)")
):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
	with next(get_db()) as db:
		total = get_documents_count(db, year=year)
		with_errors = len(get_documents_with_errors(db, year=year))

		console.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", style="bold")
		console.print(f"   –í—Å–µ–≥–æ: {total}")
		console.print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {with_errors}")
		console.print(f"   –ë–µ–∑ –æ—à–∏–±–æ–∫: {total - with_errors}")


@app.command()
def clean(
		confirm: bool = typer.Option(False, "--confirm", help="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏")
):
	"""–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
	if not confirm or confirm_prompt("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—á–∏—Å—Ç–∫—É?", default=False):
		with next(get_db()) as db:
			deleted_count = delete_all_documents(db)
			console.print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {deleted_count}", style="green")


if __name__ == "__main__":
	app()
