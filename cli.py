from pathlib import Path
from typing import Optional

import typer

from app.config import settings
from app.crud import (
	get_documents_count, delete_all_documents, delete_documents_by_year, get_documents_with_errors
)
from app.db import get_db
from app.services.export import export_documents_to_file
from app.services.files import display_files_tree
from app.services.parser import main_file_parser
from app.services.preview import paginated_preview, preview_documents_details
from app.utils.base import format_string_list, parse_range_string, get_current_year
from app.utils.console import confirm_prompt, console, print_error, print_success, print_warning, print_table

app = typer.Typer(help="üìÑ CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–∏–±–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏")


def get_common_cli_params(
		range_str: Optional[str] = None,
		year: Optional[int] = None,
		limit: int = 0,
		batch_size: int = None,
		rows_per_file: int = settings.MAX_DOCUMENTS_PER_EXPORT_FILE,
		force_update: bool = False,
		full_clean: bool = False
):
	"""–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
	return {
		'year': year or get_current_year(),
		'range_str': range_str or settings.MAX_FILES_TO_PROCESS or 'all',
		'limit': limit or settings.MAX_FILES_TO_PROCESS,
		'batch_size': batch_size or settings.CONSOLE_OUTPUT_BATCH_SIZE,
		'rows_per_file': rows_per_file or settings.MAX_DOCUMENTS_PER_EXPORT_FILE,
		'force_update': force_update or settings.REWRITE_FILE_ON_CONFLICT,
		'full_clean': full_clean
	}


@app.command()
def parse(
		data_dir: Optional[Path] = typer.Option(
			settings.DATA_DIR,
			help=f"–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.DATA_DIR})"
		),
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		limit: int = typer.Option(
			None,
			help=f"–õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.MAX_FILES_TO_PROCESS or '–Ω–µ—Ç'})"
		),
		dry_run: bool = typer.Option(False, help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"),
		batch_size: int = typer.Option(
			None,
			help=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.CONSOLE_OUTPUT_BATCH_SIZE})"
		),
		force_update: bool = typer.Option(
			False,
			help=(
					f"–í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å "
					f"(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'' if settings.REWRITE_FILE_ON_CONFLICT else '–Ω–µ '}–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å)"
			)
		)
):
	"""–ü–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""

	params = get_common_cli_params(year=year, limit=limit, batch_size=batch_size, force_update=force_update)

	files = display_files_tree(data_dir, max_display=params['batch_size'])
	if not files:
		return

	if dry_run:
		print_warning("*** –†–ï–ñ–ò–ú –ü–ê–†–°–ò–ù–ì–ê –ë–ï–ó –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î ***")

	if confirm_prompt("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥?", default=True):
		main_file_parser(
			files[:params['limit'] or None],
			params['year'],
			not dry_run,
			update_mode=params['force_update'],
			use_bulk=True
		)


@app.command()
def preview(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		range_str: str = typer.Option(
			None,
			"--range",
			help=f"–î–∏–∞–ø–∞–∑–æ–Ω: 1-100, 50-, 0:100, :200, 100: (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.MAX_FILES_TO_PROCESS or '–Ω–µ—Ç'})"
		),
		batch_size: int = typer.Option(
			None,
			help=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.CONSOLE_OUTPUT_BATCH_SIZE})"
		),

):
	"""–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

	params = get_common_cli_params(range_str, year=year, batch_size=batch_size)

	try:
		offset, limit = parse_range_string(params['range_str'])
	except ValueError as e:
		print_error(str(e))
		return

	paginated_preview(
		title=f" –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {params['year']}",
		func=preview_documents_details,
		batch_size=params['batch_size'],
		year=params['year'],
		skip=offset,
		limit=limit,
	)


@app.command()
def export(
		output_dir: Optional[Path] = typer.Option(
			settings.EXPORT_DIR,
			help=f"–ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.EXPORT_DIR})"
		),
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		range_str: str = typer.Option(
			None,
			'--range',
			help=f"–î–∏–∞–ø–∞–∑–æ–Ω: 1-100, 50-, 0:100, :200, 100: (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.MAX_FILES_TO_PROCESS or '–Ω–µ—Ç'})"
		),
		dry_run: bool = typer.Option(False, help="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"),
		rows_per_file: int = typer.Option(
			0,
			help=(
					f"–õ–∏–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ "
					f"(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.MAX_DOCUMENTS_PER_EXPORT_FILE or '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'})"
			)
		),
		force_update: bool = typer.Option(
			False,
			help=(
					f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ "
					f"(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'' if settings.REWRITE_FILE_ON_CONFLICT else '–Ω–µ '}–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å)"
			)
		)
):
	"""–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XLSX —Ñ–∞–π–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏"""

	params = get_common_cli_params(
		year=year,
		range_str=range_str,
		rows_per_file=rows_per_file,
		force_update=force_update
	)

	year = params['year']
	range_str = params["range_str"]
	rows_per_file = params['rows_per_file']

	try:
		offset, limit = parse_range_string(range_str)

	except ValueError as e:
		print_error(str(e))
		return

	# DRY-RUN –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê
	if dry_run:
		from app.services.preview import preview_summary_plans_list
		print_warning("*** –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê ***")

		paginated_preview(
			title=f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∑–∞–∫—É–ø–æ–∫ –∑–∞ {year} –≥–æ–¥",
			func=preview_summary_plans_list,
			year=year,
			skip=offset,
			limit=limit,
		)
		return

	# –†–ï–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢
	export_documents_to_file(
		title=f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∑–∞–∫—É–ø–æ–∫ –∑–∞ {year} –≥–æ–¥",
		year=year,
		output_dir=output_dir,
		rows_per_file=rows_per_file,
		force_update=params['force_update'],
		offset=offset,
		limit=limit,
	)


@app.command()
def errors(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
	params = get_common_cli_params(year=year)

	with next(get_db()) as db:
		error_docs = get_documents_with_errors(db, year=params['year'])

		if not error_docs:
			print_success("–û—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
			return

		table = print_table("üìã –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏", –§–∞–π–ª="cyan", –û—à–∏–±–∫–∏="red")

		for doc in error_docs:
			errors_text = format_string_list(doc.validation_errors)
			table.add_row(str(doc.file_path), errors_text)

		console.print(table)


@app.command()
def stats(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)")
):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
	params = get_common_cli_params(year=year)

	with next(get_db()) as db:
		total = get_documents_count(db, year=params['year'])
		with_errors = len(get_documents_with_errors(db, year=params['year']))

		console.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {params['year']} –≥–æ–¥:", style="bold")
		console.print(f"   –í—Å–µ–≥–æ: {total}")
		console.print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {with_errors}")


@app.command()
def clean(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		full_clean: bool = typer.Option(False, help="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≥–æ–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–ø—Ä–æ—Å–∏—Ç—å)"),
		no_confirm: bool = typer.Option(False, "--no-confirm", help="–ù–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
):
	"""
	–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
	–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.
	"""
	params = get_common_cli_params(year=year)

	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	if full_clean:
		msg = (
			"‚ùå –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
			"–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n"
			"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
		)
	else:
		msg = f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ {params['year']} –≥–æ–¥?"

	# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
	if no_confirm or confirm_prompt(msg, default=False):
		with next(get_db()) as db:
			if full_clean:
				deleted_count = delete_all_documents(db)
				console.print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {deleted_count}")
			else:
				deleted_count = delete_documents_by_year(db, params['year'])
				console.print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {params['year']} –≥–æ–¥: {deleted_count}")
	else:
		print_warning("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


if __name__ == "__main__":
	app()
