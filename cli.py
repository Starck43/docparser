from pathlib import Path
from typing import Optional

import typer

from app.config import settings
from app.db import get_db
from app.services.export import export_to_xls_with_months
from app.services.files import display_files_tree
from app.services.parser import main_file_parser
from app.utils.base import format_string_list, parse_range_string, get_current_year
from app.utils.console import confirm_prompt, console, print_error, print_success, print_warning
from app.crud import (
	get_documents, get_documents_count, delete_all_documents, delete_documents_by_year, get_documents_with_errors
)

app = typer.Typer(help="üìÑ CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–∏–±–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏")


def get_common_cli_params(
		range_str: Optional[str] = None,
		year: Optional[int] = None,
		limit: int = 0,
		batch_size: int = None,
		rows_per_file: int = settings.MAX_DOCUMENTS_PER_EXPORT_FILE,
		force_update: bool = False,
		full_clean: bool = False
):
	"""–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
	return {
		'year': year or get_current_year(),
		'range_str': range_str,
		'limit': limit or settings.MAX_FILES_TO_PROCESS,
		'batch_size': batch_size or settings.CONSOLE_OUTPUT_BATCH_SIZE,
		'rows_per_file': rows_per_file or settings.MAX_DOCUMENTS_PER_EXPORT_FILE,
		'force_update': force_update or settings.REWRITE_FILE_ON_CONFLICT,
		'full_clean': full_clean
	}


@app.command()
def parse(
		data_dir: Optional[Path] = typer.Option(
			settings.DATA_DIR,
			help=f"–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.DATA_DIR})"
		),
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		limit: int = typer.Option(None, help="–õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (0 = –≤—Å–µ)"),
		dry_run: bool = typer.Option(False, help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"),
		batch_size: int = typer.Option(
			None,
			help=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {settings.CONSOLE_OUTPUT_BATCH_SIZE})"
		),
		force_update: bool = typer.Option(
			False,
			help="–í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å)"
		)
):
	"""–ü–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""

	params = get_common_cli_params(year=year, limit=limit, batch_size=batch_size, force_update=force_update)

	files = display_files_tree(data_dir, max_display=params['batch_size'])
	if not files:
		return

	if dry_run:
		print_warning("*** –†–ï–ñ–ò–ú –ë–ï–ó –°–û–•–†–ê–ù–ï–ù–ò–Ø ***")

	if confirm_prompt("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥?", default=True):
		main_file_parser(
			files[:params['limit'] or None],
			params['year'],
			not dry_run,
			update_mode=params['force_update'],
			use_bulk=True
		)


@app.command()
def preview(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		range_str: str = typer.Option("1-10", "--range", help="–î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 1-10, :20, all"),
):
	"""–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

	params = get_common_cli_params(year=year)

	with next(get_db()) as db:
		total_count = get_documents_count(db, year=params['year'])

		# –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
		try:
			offset, limit = parse_range_string(range_str, total_count)
		except ValueError as e:
			print_error(str(e))
			return

		documents = get_documents(db, year=params['year'], skip=offset, limit=limit)

		if not documents:
			print_error(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {params['year']} –≥–æ–¥")
			return

		from app.services.preview import preview_export_data
		console.print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {params['year']} –≥–æ–¥", style="green")
		preview_export_data(list(documents), params['year'])


@app.command()
def export(
		output_dir: Optional[Path] = typer.Option(
			settings.EXPORT_DIR,
			help=f"–ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.EXPORT_DIR})"
		),
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"),
		range_str: str = typer.Option("all", '--range', help="–î–∏–∞–ø–∞–∑–æ–Ω: all, 1-100, 50-, 0:100, :200, 100:"),
		dry_run: bool = typer.Option(False, help="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"),
		rows_per_file: int = typer.Option(
			0,
			help=f"–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (0 - –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ)"
		),
		force_update: bool = typer.Option(
			False,
			help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π)"
		)
):
	"""–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XLSX —Ñ–∞–π–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏"""

	params = get_common_cli_params(
		year=year,
		range_str=range_str,
		rows_per_file=rows_per_file,
		force_update=force_update
	)

	with next(get_db()) as db:
		if not params['range_str']:
			documents = get_documents(db, params['year'])

		else:
			# ‚ö° –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ offset/limit
			total_count = get_documents_count(db, year=params['year'])
			offset, limit = parse_range_string(params['range_str'], total_count)

			# ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å offset/limit
			documents = get_documents(db, year=params['year'], skip=offset, limit=limit)

		if not documents:
			range_message = f"–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {offset}-{limit}" if params["range_str"] else ""
			print_error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {params['year']} –≥–æ–¥ {range_message}")
			return

		# DRY-RUN –†–ï–ñ–ò–ú
		if dry_run:
			from app.services.preview import preview_export_data
			print_warning("*** –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê ***")
			preview_export_data(list(documents), params['year'])
			return

		# –†–ï–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢
		output_dir.mkdir(exist_ok=True)

		# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if 0 < params['rows_per_file'] < len(documents):
			console.print(
				f"üì¶ –†–∞–∑–±–∏–≤–∞–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ {params['rows_per_file']}",
				style="yellow"
			)
			export_paths = []

			for i in range(0, len(documents), params['rows_per_file']):
				batch_docs = documents[i:i + params['rows_per_file']]
				part_num = i // params['rows_per_file'] + 1
				postfix = f"-part{part_num:02d}"

				export_path = export_to_xls_with_months(
					list(batch_docs),
					params['year'],
					output_dir,
					postfix,
					params['force_update']
				)
				export_paths.append(export_path)
				print_success(f"–ß–∞—Å—Ç—å {part_num}: {export_path.name}")

			print_success(f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(export_paths)}")
			return export_paths
		else:
			export_path = export_to_xls_with_months(
				list(documents), params['year'], params['output_dir'], "", params['force']
			)

			console.print("\n" + "=" * 80, style="dim")
			print_success(f"–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
			console.print("üìÇ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª XLSX:", style="bold")
			console.print(f"üìç [link=file://{export_path}]{export_path}[/link]", style="blue underline")
			console.print("=" * 80, style="dim")

			return [export_path]


@app.command()
def errors(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
	params = get_common_cli_params(year=year)

	with next(get_db()) as db:
		error_docs = get_documents_with_errors(db, year=params['year'])

		if not error_docs:
			print_success("–û—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
			return

		from app.utils.console import print_table
		table = print_table("üìã –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏", –§–∞–π–ª="cyan", –û—à–∏–±–∫–∏="red")

		for doc in error_docs:
			errors_text = format_string_list(doc.validation_errors)
			table.add_row(str(doc.file_path), errors_text)

		console.print(table)


@app.command()
def stats(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)")
):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
	params = get_common_cli_params(year=year)

	with next(get_db()) as db:
		total = get_documents_count(db, year=params['year'])
		with_errors = len(get_documents_with_errors(db, year=params['year']))

		console.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {params['year']} –≥–æ–¥:", style="bold")
		console.print(f"   –í—Å–µ–≥–æ: {total}")
		console.print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {with_errors}")


@app.command()
def clean(
		year: Optional[int] = typer.Option(None, help="–ì–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)"),
		full_clean: bool = typer.Option(False, help="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"),
		confirm: bool = typer.Option(False, help="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
):
	"""–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
	params = get_common_cli_params(year=year)

	msg = "–ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" if full_clean else f"—É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ {params['year']} –≥–æ–¥"

	if not confirm or full_clean and confirm_prompt(f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {msg}?", default=False):
		with next(get_db()) as db:
			if full_clean:
				deleted_count = delete_all_documents(db)
			else:
				deleted_count = delete_documents_by_year(db, params['year'])

			console.print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {deleted_count}")
	else:
		print_warning("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


if __name__ == "__main__":
	app()
