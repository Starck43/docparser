from pathlib import Path
from typing import TYPE_CHECKING, Callable, Any

from rich.progress import Progress, TextColumn, BarColumn
from rich.table import Table

from app.config import settings
from app.crud import get_documents_count, get_documents_with_grouped_plans
from app.db import get_db
from app.utils.base import format_string_list, get_localized_months_list, get_current_year
from app.utils.console import console

if TYPE_CHECKING:
	from app.models import DocumentCreate


def paginated_preview(
		func: Callable[[list[Any], int, int], None],
		title: str = "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö",
		**kwargs: Any,
) -> None:
	"""
	–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –ø–æ–¥–≥—Ä—É–∑–∫–æ–π –∏–∑ –ë–î.
	Args:
		func: Callable[[list[Any], int, int], None]
		title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
		**kwargs:  'year', 'skip', 'limit', batch_size
	"""
	year = kwargs.get('year') or get_current_year()
	offset = kwargs.get('skip') or 0
	limit = kwargs.get('limit')
	batch_size = kwargs.get('batch_size') or settings.CONSOLE_OUTPUT_BATCH_SIZE

	total_errors = 0

	console.print("=" * len(title), style="blue")
	console.print(title.upper(), style="bold blue")
	if limit is not None or offset > 0:
		console.print(f"üéØ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: [italic cyan]{offset+1}-{offset + limit}[/italic cyan]")
	console.print("=" * len(title), style="blue")

	with next(get_db()) as db, Progress(
			TextColumn("[progress.description]{task.description}"),
			BarColumn(),
			TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
			TextColumn("({task.completed}/{task.total})"),
			console=console,
			transient=True
	) as progress:

		# –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î
		total_in_db = get_documents_count(db, year=year)

		# –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞
		if limit is not None:
			# –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 2-9: offset=1, limit=8, total_count=min(1+8, 10)=9
			total_count = min(offset + limit, total_in_db)
			docs_to_show = total_count - offset  # 9-1=8 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
		else:
			total_count = total_in_db
			docs_to_show = total_count - offset

		if docs_to_show <= 0:
			console.print("‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ", style="red")
			return

		progress_title = "üí° [bold red]Ctrl+C[/bold red] - –ø—Ä–µ—Ä–≤–∞—Ç—å."
		task = progress.add_task(f"{progress_title}", total=docs_to_show)

		current_index = offset
		docs_processed = 0

		# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		while current_index < total_count and docs_processed < docs_to_show:
			remaining = docs_to_show - docs_processed
			current_batch_size = min(batch_size, remaining)

			batch_docs = get_documents_with_grouped_plans(
				db,
				year=year,
				skip=current_index,
				limit=current_batch_size
			)

			if not batch_docs:
				break

			# –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
			batch_errors = sum(
				1 for doc_item in batch_docs
				if hasattr(
					doc_item[0] if isinstance(doc_item, tuple) else doc_item,
					'has_validation_errors'
				) and (
					doc_item[0] if isinstance(doc_item, tuple) else doc_item
				).has_validation_errors
			)
			total_errors += batch_errors

			func(list(batch_docs), current_index + 1, total_count)

			batch_len = len(batch_docs)
			current_index += batch_len
			docs_processed += batch_len
			progress.update(task, completed=docs_processed)

			if docs_processed < docs_to_show:
				try:
					input("üí° –ù–∞–∂–º–∏—Ç–µ [bold]Enter[/bold] –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
				except KeyboardInterrupt:
					break

	if docs_processed >= docs_to_show:
		console.print("\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.", style="bold green")
	else:
		console.print(f"\nüõë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Ä–≤–∞–Ω. –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {docs_to_show - docs_processed}", style="yellow")

	console.print("=" * 40, style="dim")
	console.print(f"üìÅ –ü–æ–∫–∞–∑–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: [green]{docs_processed} / {total_in_db}[/green]")
	console.print(f"‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏: [red]{total_errors}[/red]")
	console.print("=" * 40 + "\n", style="dim")


def preview_documents_details(documents: list, start_num: int = 1, limit: int = None):
	"""–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

	for i, doc in enumerate(documents, start_num):
		if isinstance(doc, tuple) and len(doc) == 2:
			# –§–æ—Ä–º–∞—Ç (Document, summary)
			document, summary = doc
		else:
			# –§–æ—Ä–º–∞—Ç Document
			document = doc
			summary = doc.get_plans_summary()

		title = f"\nüìÑ [{i}]: [bold white]{Path(document.file_path).name}[/bold white]"
		console.print(title)
		console.print("-" * (len(title) - 24), style="dim")

		# –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		console.print(f"   üìã –°–æ–≥–ª–∞—à–µ–Ω–∏–µ: {document.agreement_number or '<–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ>'}")
		console.print(f"   üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: [bold]{document.year}[/bold]")
		console.print(
			f"   üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã: "
			f"[green bold]"
			f"{format_string_list(document.customer_names_list, separator=' + ') or '‚Äî'}"
			f"[/green bold]"
		)
		console.print(
			f"   üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: "
			f"[yellow bold]"
			f"{document.allowed_deviation or '‚Äî'}"
			f"[/yellow bold]"
		)

		# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫ –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
		if summary:
			preview_document_plans(summary)
		else:
			console.print("   üìä –ü–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫: [yellow]–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö[/yellow]")

		if document.has_validation_errors:
			console.print(f"   ‚ùå –û—à–∏–±–∫–∏: [red]{format_string_list(document.validation_errors_list)}[/red]")


def preview_summary_plans_list(documents: list, start_num: int = 1, limit: int = None) -> None:
	"""
	–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ.
	"""
	if not documents:
		console.print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–ª–∞–Ω–æ–≤—ã–º –∑–∞–∫—É–ø–∫–∞–º", style="yellow")
		return

	# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	combined_plans = {}
	documents_validation_errors = []

	for doc in documents:
		if isinstance(doc, tuple) and len(doc) == 2:
			document, summary = doc
		else:
			document = doc
			summary = getattr(document, 'grouped_plans', {})

		# –°—É–º–º–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
		for customer, months_data in summary.items():
			if customer not in combined_plans:
				combined_plans[customer] = [0.0] * 12

			for i, value in enumerate(months_data):
				if value is not None:
					combined_plans[customer][i] += value

	table = Table(
		show_header=True,
		header_style="bold magenta",
		show_lines=True,
		title=(
			f"\n–ò—Ç–æ–≥–æ–≤—ã–µ –ø–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫ —Å "
			f"[cyan bold]{start_num}[/cyan bold] –ø–æ [cyan bold]{start_num + len(documents) - 1}[/cyan bold]"
		)
	)

	table.add_column("‚Ññ", style="white", width=3)
	table.add_column("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã", style="green", width=25)

	# –ú–µ—Å—è—Ü—ã
	months = get_localized_months_list()
	for month in months:
		table.add_column(month, width=6, justify="right")

	table.add_column("–û—Ç–∫–ª (-)", width=8, justify="center", style="bold yellow")

	# –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
	for idx, doc in enumerate(documents, start_num):
		if isinstance(doc, tuple) and len(doc) == 2:
			document, summary = doc
		else:
			document = doc
			summary = getattr(document, 'grouped_plans', {})

		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–µ—Å—è—á–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ –∑–∞–∫—É–ø–æ–∫
		for customer_idx, (customer, months_data) in enumerate(summary.items()):
			customer_display = format_string_list(document.customer_names) if customer == "all" else customer

			# –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
			row_data = [str(idx), customer_display]
			total_customer = 0.0

			for value in months_data:
				if value is not None and value > 0:
					display_value = f"{int(value)}" if value == int(value) else f"{value:.1f}"
					row_data.append(display_value)
					total_customer += value
				else:
					row_data.append("‚Äî")

			table.add_row(*row_data, document.allowed_deviation)

		if document.has_validation_errors:
			documents_validation_errors.extend(document.validation_errors_list)

	console.print(table)
	if documents_validation_errors:
		console.print(
			f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:\n"
			f"[red]{format_string_list(documents_validation_errors)}[/red]"
		)


def preview_document_plans(summary: dict) -> None:
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –ø–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–º –ø–æ –≤—Å–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º"""
	if not summary:
		return

	# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É
	for idx, (customer_name, monthly_data) in enumerate(summary.items(), 1):
		if customer_name != "all":
			console.print(f"\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {idx}: [bold cyan]{customer_name}[/bold cyan]")

		# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		table = Table(show_header=True, header_style="bold blue", show_lines=True)

		months = get_localized_months_list() + ["–ò—Ç–æ–≥–æ"]

		for month in months:
			table.add_column(month, width=7, justify="right")

		# –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
		monthly_values = [f"{val:.2f}" if val is not None else "‚Äî" for val in monthly_data]

		# –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥
		total = sum(val for val in monthly_data if val is not None)
		monthly_values.append(f"[bold]{total:.2f}[/bold]")

		table.add_row(*monthly_values)
		console.print(table)


def preview_document_info(document: 'DocumentCreate', title: str = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞"):
	"""–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""

	if not document:
		console.print("üì≠ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", style="yellow")
		return

	table = Table(
		title=f"{title}" or None,
		show_header=True,
		header_style="bold magenta"
	)

	# –ö–æ–ª–æ–Ω–∫–∏
	table.add_column("–§–∞–π–ª", style="blue", width=30)
	table.add_column("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã", style="green", width=30)
	table.add_column("‚Ññ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", style="white", width=12)
	table.add_column("–ì–æ–¥", style="white", width=5)
	table.add_column("–û—Ç–∫–ª (-)", style="yellow", width=8)
	table.add_column("–û—à–∏–±–∫–∏", style="red", width=40)

	file_path = Path(document.file_path).name
	customer_names = format_string_list(document.customer_names, default_text="–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
	errors = format_string_list(document.validation_errors)

	table.add_row(
		file_path,
		customer_names,
		document.agreement_number or "‚Äî",
		str(document.year or "‚Äî"),
		document.allowed_deviation or "‚Äî",
		errors or "‚Äî"
	)

	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é
	console.print(table)
