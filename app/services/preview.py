from pathlib import Path
from typing import TYPE_CHECKING

from rich.table import Table

from app.config import settings
from app.utils.base import format_string_list
from app.utils.console import confirm_prompt, console

if TYPE_CHECKING:
	from app.models import Document, DocumentCreate


def preview_export_data(documents: list['Document'], year: int) -> None:
	"""–ü–æ–ª–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""

	console.print(f"\nüìä –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {year} –≥–æ–¥", style="bold green")
	console.print("=" * 60, style="dim")

	# –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	with_errors = sum(1 for doc in documents if doc.validation_errors)

	console.print(f"üìÅ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
	console.print(f"‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏: {with_errors}")
	console.print("=" * 60, style="dim")

	# –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
	batch_size = settings.CONSOLE_OUTPUT_BATCH_SIZE
	current_batch = 0

	for i, document in enumerate(documents, 1):
		# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
		console.print(f"\nüìÑ –§–∞–π–ª {i}/{len(documents)}: [bold cyan]{Path(document.file_path).name}[/bold cyan]")
		console.print("." * 60, style="dim")

		# –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
		console.print(f"üìù –°–æ–≥–ª–∞—à–µ–Ω–∏–µ: [cyan bold]{document.agreement_number or '‚Äî'}[/cyan bold]")
		console.print(f"üìÖ –ì–æ–¥: [cyan bold]{document.year or '‚Äî'}[/cyan bold]")
		console.print(f"üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã: [green bold]{', '.join(document.customer_names_list)}[/green bold]")
		console.print(f"üìè –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {document.allowed_deviation or '‚Äî'}")

		# –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
		if document.validation_errors:
			console.print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", style="red")
			for error in document.validation_errors:
				console.print(f"   ‚ö†Ô∏è  [yellow]{error}[/yellow]")

		# –ü–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
		if document.plans:
			console.print("\nüìà –ü–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º:", style="bold")
			preview_monthly_data(document)
		else:
			console.print("üìà –ü–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫: [red]–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç[/red]")

		# –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ batch_size –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
		if i % batch_size == 0 and i < len(documents):
			console.print(f"üìñ –ü–æ–∫–∞–∑–∞–Ω–æ {i} –∏–∑ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n")

			if not confirm_prompt("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä?", default=True):
				console.print("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style="yellow")
				break

			console.print("." * 60, style="dim")

		current_batch = i

	# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	console.print(f"\nüéØ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.", style="bold green")

	if current_batch < len(documents):
		console.print(f"üëÄ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents) - current_batch}", style="yellow")


def preview_document_data(
		documents: list['Document'] | list['DocumentCreate'] | None,
		title: str = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"
) -> Table:
	"""–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

	table = Table(title=title, show_header=True, header_style="bold magenta")

	# –ö–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
	table.add_column("–§–∞–π–ª", style="cyan", width=30)
	table.add_column("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã", style="green", width=40)
	table.add_column("‚Ññ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", style="yellow", width=12)
	table.add_column("–ì–æ–¥", style="blue", width=5)
	table.add_column("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ +/-", style="gold1", width=15)
	table.add_column("–û—à–∏–±–∫–∏", style="red", width=25)

	for doc in documents:
		# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
		customer_names = format_string_list(doc.customer_names, default_text="–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", max_line_length=25)
		errors = format_string_list(doc.validation_errors, max_line_length=25)

		table.add_row(
			Path(doc.file_path).name,
			customer_names,
			doc.agreement_number or "‚Äî",
			str(doc.year or "‚Äî"),
			doc.allowed_deviation,
			errors
		)

	return table


def preview_monthly_data(document: 'Document') -> None:
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º"""
	if not document.plans:
		return

	summary = document.get_plans_summary()

	# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É
	for idx, (customer_name, monthly_data) in enumerate(summary.items(), 1):
		if customer_name != "all":
			console.print(f"\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {idx}: [bold cyan]{customer_name}[/bold cyan]")

		# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		table = Table(show_header=True, header_style="bold green", show_lines=True)

		months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫", "–ò—Ç–æ–≥–æ"]

		for month in months:
			table.add_column(month, width=8, justify="right")

		# –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
		monthly_values = [f"{val:.1f}" if val is not None else "‚Äî" for val in monthly_data]

		# –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥
		total = sum(val for val in monthly_data if val is not None)
		monthly_values.append(f"[bold]{total:.1f}[/bold]")

		table.add_row(*monthly_values)
		console.print(table)
