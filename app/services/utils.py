import json
import re
import shutil
from datetime import datetime
from pathlib import Path
from typing import Iterator, Any, TYPE_CHECKING, Optional

import docx
import pdfplumber

from app.config import settings

if TYPE_CHECKING:
	from app.models import Document


def is_supported(file: Path) -> bool:
	"""–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"""
	return file.suffix.lower() in settings.SUPPORTED_FORMATS


def ensure_upload_dir() -> None:
	Path(settings.EXPORT_DIR).mkdir(parents=True, exist_ok=True)


def find_documents(directory: Path) -> Iterator[Path]:
	"""
	–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
	"""
	for ext in settings.SUPPORTED_FORMATS:
		yield from directory.glob(f'**/*{ext}')


def safe_move_file(src: Path, dst: Path) -> Path:
	"""
	–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
	"""
	dst.parent.mkdir(parents=True, exist_ok=True)

	if dst.exists():
		if settings.AUTO_RENAME_ON_CONFLICT:
			counter = 1
			while dst.exists():
				new_name = f"{dst.stem}-{counter:02d}{dst.suffix}"
				dst = dst.with_name(new_name)
				counter += 1
		else:
			raise FileExistsError(f"–§–∞–π–ª {dst} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

	shutil.move(str(src), str(dst))
	return dst


def extract_text_from_pdf(path: str) -> str:
	"""
	–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ò —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF –∏—Å–ø–æ–ª—å–∑—É—è pdfplumber.
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.
	"""
	try:
		texts = []
		with pdfplumber.open(path) as pdf:
			for page in pdf.pages:
				page_text = page.extract_text()
				if page_text:
					texts.append(page_text)
		return "\n".join(texts).strip()
	except Exception as e:
		print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
		return ""


def extract_tables_from_pdf(path: str) -> list[list[list[str]]]:
	"""
	–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF.
	"""
	try:
		all_tables = []
		with pdfplumber.open(path) as pdf:
			for page in pdf.pages:
				tables = page.extract_tables()
				for table in tables:
					if table:
						cleaned_table = clean_table_data(table)
						if cleaned_table and len(cleaned_table) > 1:
							all_tables.append(cleaned_table)
		return all_tables
	except Exception as e:
		print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
		return []


def extract_text_from_txt(path: str) -> str:
	"""–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT"""
	try:
		with open(path, "r", encoding="utf-8", errors="ignore") as f:
			return f.read()
	except Exception as e:
		print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è TXT: {e}")
		return ""


def extract_text_from_docx(path: str) -> str:
	"""–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX"""
	try:
		doc = docx.Document(path)
		return "\n".join(paragraph.text for paragraph in doc.paragraphs)
	except Exception as e:
		print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX: {e}")
		return ""


def parse_file_to_text(path: Path) -> str:
	"""
	–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: –≤—ã–±–∏—Ä–∞–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é.
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π).
	"""
	if not is_supported(path):
		raise ValueError(f"–§–æ—Ä–º–∞—Ç {path.suffix} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

	suffix = path.suffix.lower()

	if suffix == ".pdf":
		return extract_text_from_pdf(str(path))
	elif suffix == ".txt":
		return extract_text_from_txt(str(path))
	elif suffix in [".docx", ".doc"]:
		return extract_text_from_docx(str(path))
	else:
		# –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
		try:
			return extract_text_from_txt(str(path))
		except:
			return ""


def clean_table_data(table: list[list[Any]]) -> list[list[str]]:
	"""
	–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: —É–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, None, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã.
	"""
	cleaned_table = []

	if not table:
		return cleaned_table

	# –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
	max_cols = max(len(row) for row in table) if table else 0

	for row in table:
		cleaned_row = []
		for cell in row:
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
			if cell is None:
				cleaned_cell = ""
			else:
				# –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —á–∏—Å—Ç–∏–º
				cleaned_cell = str(cell).replace('\n', ' ').replace('\r', ' ')
				# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
				cleaned_cell = re.sub(r'\s+', ' ', cleaned_cell).strip()

			cleaned_row.append(cleaned_cell)

		# –î–æ–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
		while len(cleaned_row) < max_cols:
			cleaned_row.append("")

		cleaned_table.append(cleaned_row)

	return cleaned_table


def document_to_document_create(doc: 'Document', customer_plans: dict[str, list[Optional[float]]]) -> 'DocumentCreate':
	"""
	–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Document –≤ DocumentCreate –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å print_monthly_summary.
	"""
	from app.models import DocumentCreate, ProductPlanCreate

	# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	plans = []
	for customer_name, monthly_plans in customer_plans.items():
		for month_idx, quantity in enumerate(monthly_plans, 1):
			if quantity is not None:
				plans.append(ProductPlanCreate(
					month=month_idx,
					year=doc.year,
					planned_quantity=quantity,
					customer_name=customer_name if customer_name != "–í—Å–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏" else None
				))

	return DocumentCreate(
		file_path=doc.file_path,
		agreement_number=doc.agreement_number,
		customer_names=json.loads(doc.customer_names) if doc.customer_names else [],
		year=doc.year,
		allowed_deviation=doc.allowed_deviation,
		validation_errors=json.loads(doc.validation_errors) if doc.validation_errors else [],
		plans=plans
	)


def print_formatted_table(table: list[list[Any]], title: str = "–¢–ê–ë–õ–ò–¶–ê", max_col_width: int = 30):
	"""
	–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —à–∏—Ä–∏–Ω—ã –ö–ê–ñ–î–û–ô –∫–æ–ª–æ–Ω–∫–∏.
	–ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_col_width - —É–∫–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å '...'
	"""
	if not table:
		print("   [–ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞]")
		return

	cleaned_table = clean_table_data(table)
	if not cleaned_table:
		return

	max_cols = len(cleaned_table[0])

	# 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ max_col_width)
	col_widths = [0] * max_cols
	for row in cleaned_table:
		for i, cell in enumerate(row):
			if i < max_cols:
				# –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
				cell_width = min(len(cell), max_col_width)
				col_widths[i] = max(col_widths[i], cell_width)

	# 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ã
	total_width = sum(col_widths) + (max_cols - 1) * 3  # " ‚îÇ " –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏

	# 3. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
	print(f"   ‚îå{'‚îÄ' * total_width}‚îê")
	print(f"   ‚îÇ {title.center(total_width - 2)} ‚îÇ")
	print(f"   ‚îú{'‚îÄ' * total_width}‚î§")

	for row in cleaned_table:
		cells = []
		for i, cell in enumerate(row):
			if i < len(col_widths):
				display_cell = cell
				# –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
				if len(display_cell) > col_widths[i]:
					display_cell = display_cell[:col_widths[i] - 3] + "..."
				cells.append(display_cell.ljust(col_widths[i]))
			else:
				cells.append("")
		print(f"   ‚îÇ {' ‚îÇ '.join(cells)} ‚îÇ")

	print(f"   ‚îî{'‚îÄ' * total_width}‚îò")


def print_monthly_summary(document_data: 'DocumentCreate'):
	"""
	–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤ –∑–∞–∫—É–ø–æ–∫ —Å —É—á–µ—Ç–æ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
	"""

	# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
	plans_by_customer = {}
	for plan in document_data.plans:
		customer_key = plan.customer_name or "all"
		if customer_key not in plans_by_customer:
			plans_by_customer[customer_key] = [None] * 12

		if 1 <= plan.month <= 12 and plan.planned_quantity is not None:
			month_index = plan.month - 1
			# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å—É–º–º–∏—Ä—É–µ–º
			if plans_by_customer[customer_key][month_index] is None:
				plans_by_customer[customer_key][month_index] = plan.planned_quantity
			else:
				plans_by_customer[customer_key][month_index] += plan.planned_quantity

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
	for customer_name, monthly_plans in plans_by_customer.items():
		display_name = "" if customer_name == "all" else customer_name

		# –ü–æ–º–µ—á–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
		if customer_name.startswith('*'):
			display_name = f"‚ö†Ô∏è  {customer_name}"

		if display_name:
			print(f"\n   üë• {display_name}:")

		# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
		table_data = [
			["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫", "–ò—Ç–æ–≥–æ"]
		]

		row = []
		total = 0
		for monthly_plan in monthly_plans:
			if monthly_plan is not None:
				row.append(str(monthly_plan))
				total += monthly_plan
			else:
				row.append("")

		row.append(str(total))
		table_data.append(row)

		print_formatted_table(table_data, "–°–£–ú–ú–ê–†–ù–´–ï –ü–õ–ê–ù–´", max_col_width=8)


def get_current_year() -> int:
	"""
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–æ–¥.
	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.
	"""
	return datetime.now().year


def get_unique_filename(directory: Path, base_name: str, extension: str = ".xlsx") -> Path:
	"""
	–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è—è –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

	Args:
		directory: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		base_name: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
		extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é .xlsx)

	Returns:
		–ü—É—Ç—å –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
	"""
	counter = 1
	while True:
		if counter == 1:
			filename = f"{base_name}{extension}"
		else:
			filename = f"{base_name}-{counter:02d}{extension}"

		file_path = directory / filename

		if not file_path.exists():
			return file_path

		# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
		choice = input(
			f"–§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. (–¥ - –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å,  –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏—à–∞ - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º): "
		).lower().strip()
		if choice in ['–¥', '–¥–∞', '—É', 'y', 'yes']:
			return file_path
		else:
			counter += 1
