import re
from pathlib import Path
from typing import Optional, Any

from app.config import settings
from app.crud import create_document, update_document, get_document_by_slug, bulk_save_documents
from app.db import get_db
from app.models import DocumentCreate, ProductPlanCreate
from app.services.files import convert_file_to_text
from app.utils.base import get_current_year, format_string_list, slugify_filename
from app.utils.console import console, print_error


def main_file_parser(
		files: list[Path],
		year: int,
		save_to_db: bool = True,  # dry-run —Ä–µ–∂–∏–º
		update_mode: bool = False,  # False = –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å, True = –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
		use_bulk: bool = True
) -> int:
	"""
	–ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
	"""

	parser = DocumentParser()
	bulk_buffer: list['DocumentCreate'] = []
	processed = skipped = updated = 0

	for i, file_path in enumerate(files, 1):
		try:
			# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (data[0] - —Ç–µ–∫—Å—Ç, data[1] - —Ç–∞–±–ª–∏—Ü—ã)
			data = convert_file_to_text(file_path)
			if not data[0]:
				skipped += 1
				continue

			# –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥
			document_data = parser.parse_document(str(file_path.name), data=data, year=year)

			# –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
			if not document_data.plans:
				full_status = parser.format_status(document_data.validation_errors, True, False)
				console.print(f"[{i:03d}/{len(files)}]: [grey]{file_path.name}[/grey] ... {full_status}")
				skipped += 1
				continue

			with next(get_db()) as db:
				existing_doc = get_document_by_slug(db, document_data.slug)

				if existing_doc:
					if update_mode:
						if save_to_db and not use_bulk:
							document_data = update_document(db, existing_doc.id, document_data)
						updated += 1
					else:
						full_status = parser.format_status(document_data.validation_errors, True, update_mode)
						console.print(f"[{i:03d}/{len(files)}]: [grey]{file_path.name}[/grey] ... {full_status}")
						skipped += 1
						continue
				else:
					if save_to_db and not use_bulk:
						document_data = create_document(db, document_data)

				# –ï—Å–ª–∏ bulk-—Ä–µ–∂–∏–º ‚Äî –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
				if save_to_db and use_bulk:
					bulk_buffer.append(document_data)

			processed += 1

			# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
			full_status = parser.format_status(document_data.validation_errors, bool(existing_doc), update_mode)

			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
			console.print(f"[{i:03d}/{len(files)}]: [gray]{file_path.name}[/gray] ... {full_status}")

			if document_data.validation_errors:
				console.print(f"          ‚ö†Ô∏è  [red]{format_string_list(document_data.validation_errors, separator=', ')}[/red]")

		except Exception as e:
			print_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
			skipped += 1
			continue

		# –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (bulk)
		if save_to_db and use_bulk and bulk_buffer:
			with next(get_db()) as db:
				bulk_save_documents(db, bulk_buffer, update_mode=update_mode)

	# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–±—â–∞—è)
	console.print("\n" + "=" * 50, style="dim")
	console.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", style="bold")
	console.print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(files)}")
	console.print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
	console.print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
	console.print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
	console.print("=" * 50, style="dim")

	return processed


class DocumentParser:
	def parse_document(
			self,
			src: str,
			data: tuple[str, list[dict[str, Any]] | None],
			year: int
	) -> Optional['DocumentCreate']:
		try:
			# 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã
			text, tables = data

			# 2. –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			agreement_number = self._parse_agreement_number(text)
			agreement_year = self._parse_agreement_period(text)
			customers = self._parse_customers(text)
			allowed_deviation = self._parse_allowed_deviation(text)

			# 4. –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã
			plans, validation_errors = self._prepare_plans(tables, customers, year)

			# 5. –í–∞–ª–∏–¥–∞—Ü–∏—è
			if not customers:
				validation_errors.append("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

			if not agreement_number:
				validation_errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å–æ–≥–ª–∞—à–µ–Ω–∏—è")

			if not agreement_year:
				validation_errors.append("–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

			if not allowed_deviation:
				validation_errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")

			if not plans:
				validation_errors.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫ –Ω–∞ {year} –≥–æ–¥")

			# 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
			return DocumentCreate(
				file_path=src,
				slug=slugify_filename(src),
				agreement_number=agreement_number or "* –ë–µ–∑ –Ω–æ–º–µ—Ä–∞",
				customer_names=customers or ["* –ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"],
				year=year,
				allowed_deviation=allowed_deviation or "* 0%",
				validation_errors=validation_errors,
				plans=plans
			)

		except Exception as e:
			return DocumentCreate(
				file_path=src,
				agreement_number="* –ë–µ–∑ –Ω–æ–º–µ—Ä–∞",
				customer_names=["* –ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"],
				year=get_current_year(),
				allowed_deviation="",
				validation_errors=[str(e)],
			)

	def _parse_customers(self, text: str) -> list[str] | None:
		"""
		–ü–∞—Ä—Å–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π.
		–£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∞—è —Å–∫–æ–±–∫–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å:
		–∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫—Ä—É–≥–ª–æ–π —Å–∫–æ–±–∫–∏ –¥–æ –∑–∞–ø—è—Ç–æ–π/–∏–º–µ–Ω—É–µ–º.
		"""
		# 1. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
		block_match = re.search(r'(.*?)(?=–Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º:|1\.)', text, re.DOTALL | re.IGNORECASE)
		if not block_match:
			return

		search_text = block_match.group(1)

		# 2. –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫
		search_text = re.sub(r'([¬´"\'`][^¬ª"\'`]*)\n([^¬ª"\'`]*[¬ª"\'`])', r'\1 \2', search_text)

		# 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ñ–æ—Ä–º—ã —é—Ä.–ª–∏—Ü–∞
		patterns = "|".join(re.escape(p) for p in settings.LEGAL_ENTITY_PATTERNS)

		# 4. –ë–µ—Ä—ë–º —É—á–∞—Å—Ç–æ–∫ –æ—Ç —Ñ–æ—Ä–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞ "–∏–º–µ–Ω—É–µ–º"
		regex = re.compile(rf'({patterns})([^,\n]*?)(?=[_,]|\b–∏–º–µ–Ω—É–µ–º\b)', re.IGNORECASE | re.DOTALL)
		matches = [m.group().strip() for m in regex.finditer(search_text)]

		# 5. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å (–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è), –∏–Ω–∞—á–µ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
		customers = [part.strip(" )") for m in matches for part in [m.split("(")[-1].strip()]]

		# 6. –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
		customers = [
			name for name in customers
			if not any(exc.lower() in name.lower() for exc in settings.EXCLUDE_NAME_LIST)
		]

		return customers

	def _parse_agreement_number(self, text: str) -> str | None:
		"""
		–ò—â–µ—Ç –Ω–æ–º–µ—Ä –¥–æ–ø. –°–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ—Ä–∞–∑–æ–π '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï'.
		"""
		lines = text.split('\n')
		for line in lines:
			if line.strip().upper().startswith('–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï'):
				# –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã
				match = re.search(r'–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï\s+–°–û–ì–õ–ê–®–ï–ù–ò–ï\s*(?:‚Ññ|No|#)?\s*(\S+)', line, re.IGNORECASE)
				if match:
					return match.group(1).strip()

	def _parse_agreement_period(self, text: str) -> str | None:
		"""
		–ò—â–µ—Ç –≥–æ–¥—ã –∏–∑ –ø–µ—Ä–∏–æ–¥–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ 1. –∏ 4.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
		"""

		# –ò—â–µ–º –±–ª–æ–∫ –º–µ–∂–¥—É 1. –∏ 2.
		block_match = re.search(r'1\.(.*?)4\.', text, re.DOTALL)
		if not block_match:
			return

		search_block = block_match.group(1)

		# –ò—â–µ–º –≤—Å–µ –≥–æ–¥–∞ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
		year_matches = re.findall(r'20\d{2}', search_block)
		if year_matches:
			# –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
			return year_matches[-1]

	def _parse_allowed_deviation(self, text: str) -> str | None:
		"""
		–ü–∞—Ä—Å–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ 4. –∏ –¥–æ –∫–æ–Ω—Ü–∞.
		–ë–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç % –µ—Å–ª–∏ –µ—Å—Ç—å.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –æ—à–∏–±–∫–∏).
		"""

		block_match = re.search(r'4\..*?5\.', text, re.DOTALL)
		if not block_match:
			return None

		search_block = block_match.group(0)

		matches = re.findall(r'(\d+[.,]?\d*?)\s*(%|—Ç–æ–Ω–Ω)', search_block, re.DOTALL)
		if matches:
			number, unit = matches[-1]
			return f"{number.replace(',', '.')}{'%' if unit == '%' else '—Ç.'}"

		return None

	def _determine_customer_for_table(
			self,
			tables_count: int,
			table_index: int,
			customers: list[str]
	) -> tuple[Optional[str], list[str]]:
		"""
		–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
		"""
		errors = []

		if tables_count == 1:
			# –û–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ - –¥–ª—è –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
			return None, errors

		if not customers:
			errors.append("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–ª—è —Å–≤–æ–∏—Ö —Ç–∞–±–ª–∏—Ü")
			return f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å_{table_index + 1}", errors

		# –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü - –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É (—Å –Ω–∞—á–∞–ª–∞)
		if table_index < len(customers):
			return customers[table_index], errors
		else:
			errors.append(f"–î–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_index + 1} –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–≤—Å–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {len(customers)})")
			return None, errors  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è

	def _prepare_plans(
			self,
			tables: list[list[list[str]]] | None,
			customers: list[str],
			year: int
	) -> tuple[list[ProductPlanCreate] | None, list[str] | None]:
		"""
		–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã –ø–ª–∞–Ω–æ–≤.
		–ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ —Ç–∞–±–ª–∏—Ü —Ç–æ–∂–µ, —Ç–æ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –ø–ª–∞–Ω—ã –∑–∞ –∫–∞–∂–¥—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ProductPlanCreate –¥–ª—è –≤—Å–µ—Ö 12 –º–µ—Å—è—Ü–µ–≤, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
		"""
		if not tables:
			return None, None

		all_plans = []
		all_errors = []

		for i, table in enumerate(tables):
			# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü
			customer_name, errors = self._determine_customer_for_table(len(tables), i, customers)
			all_errors.extend(errors)

			monthly_totals = {month: 0.0 for month in range(1, 13)}

			for row in table[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–ø–∫—É
				if not row or len(row) < 2:
					continue

				date_str = row[0]
				try:
					month_num = int(date_str.split('.')[0])
					date_year = int(date_str.split('.')[1])

					if date_year != year or not 1 <= month_num <= 12:
						continue

					total_str = row[-1] or "0"
					total_value = float(total_str.replace(',', '.').replace(' ', ''))
					monthly_totals[month_num] = total_value

				except (ValueError, IndexError):
					continue

			# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç "–ø–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫" –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
			customer_plans = [
				ProductPlanCreate(
					month=month,
					year=year,
					planned_quantity=monthly_totals[month],
					customer_name=customer_name,
				)
				for month in range(1, 13)
			]

			all_plans.extend(customer_plans)

		return all_plans, all_errors

	@staticmethod
	def format_status(validation_errors: list[str], is_exist: bool, update_mode: bool) -> str:
		"""–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""

		# –í–∞–ª–∏–¥–∞—Ü–∏—è
		if validation_errors:
			validation = f"[red]{len(validation_errors)} –æ—à–∏–±–∫–∞[/red]"
		else:
			validation = "[green]OK[/green]"

		if is_exist:
			if update_mode:
				action = " ([blue]–û–±–Ω–æ–≤–ª–µ–Ω[/blue])"
			else:
				action = " ([yellow]–ü—Ä–æ–ø—É—â–µ–Ω[/yellow])"
		else:
			action = ""

		return f"{validation} {action}"
