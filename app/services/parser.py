import re
from pathlib import Path
from typing import Optional, Any

from app.config import settings
from app.crud import create_document, update_document, get_document_by_file_path, bulk_save_documents
from app.db import get_db
from app.models import DocumentCreate, ProductPlanCreate
from app.utils.base import get_current_year, extract_data_from_file, format_string_list
from app.utils.console import console, print_error


def main_file_parser(
		files: list[Path],
		year: int,
		save_to_db: bool = True,  # dry-run —Ä–µ–∂–∏–º
		update_mode: bool = False,  # False = –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å, True = –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
		use_bulk: bool = True
) -> int:
	"""
	–ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
	"""

	parser = DocumentParser()
	bulk_buffer: list['DocumentCreate'] = []
	processed = skipped = updated = 0

	for i, file_path in enumerate(files, 1):
		try:
			# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (data[0] - —Ç–µ–∫—Å—Ç, data[1] - —Ç–∞–±–ª–∏—Ü—ã)
			data = extract_data_from_file(file_path)
			if not data[0]:
				continue

			# –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥
			document_data = parser.parse_document(str(file_path.name), data=data, year=year)

			# –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
			if not document_data.plans:
				full_status = parser.format_status(document_data.validation_errors, True, False)
				console.print(f"[{i:03d}/{len(files)}]: [grey]{file_path.name}[/grey] ... {full_status}")
				continue

			with next(get_db()) as db:
				existing_doc = get_document_by_file_path(db, str(file_path))

				if existing_doc:
					if update_mode:
						if save_to_db and not use_bulk:
							document_data = update_document(db, existing_doc.id, document_data)
						updated += 1
					else:
						skipped += 1
						full_status = parser.format_status(document_data.validation_errors, True, update_mode)
						console.print(f"[{i:03d}/{len(files)}]: [grey]{file_path.name}[/grey] ... {full_status}")
						continue
				else:
					if save_to_db and not use_bulk:
						document_data = create_document(db, document_data)

				# –ï—Å–ª–∏ bulk-—Ä–µ–∂–∏–º ‚Äî –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
				if save_to_db and use_bulk:
					bulk_buffer.append(document_data)

			processed += 1

			# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
			full_status = parser.format_status(document_data.validation_errors, bool(existing_doc), update_mode)

			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
			console.print(f"[{i:03d}/{len(files)}]: [gray]{file_path.name}[/gray] ... {full_status}")

			if document_data.validation_errors:
				console.print(f"          ‚ö†Ô∏è  [red]{format_string_list(document_data.validation_errors, separator=', ')}[/red]")

		except Exception as e:
			print_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
			continue

		# –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (bulk)
		if save_to_db and use_bulk and bulk_buffer:
			with next(get_db()) as db:
				bulk_save_documents(db, bulk_buffer, update_mode=update_mode)

	# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–±—â–∞—è)
	console.print("\n" + "=" * 50, style="dim")
	console.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", style="bold")
	console.print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(files)}")
	console.print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
	console.print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
	console.print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
	console.print("=" * 50, style="dim")

	return processed


class DocumentParser:
	def __init__(self):
		self.pattern_table_header = re.compile(
			r'—Å—Ä–æ–∫\s*\(–ø–µ—Ä–∏–æ–¥\)\s*–ø–æ—Å—Ç–∞–≤–∫–∏|–º–µ—Å—è—Ü/–≥–æ–¥|–ø—Ä–æ–¥—É–∫—Ç',
			re.IGNORECASE
		)
		self.month_map = {
			'—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
			'–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
			'—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
		}

	def parse_document(
			self,
			src: str,
			data: tuple[str, list[dict[str, Any]] | None],
			year: int
	) -> Optional[DocumentCreate]:
		try:
			validation_errors = []
			plans = []

			# 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã
			text, tables = data

			# 2. –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			agreement_number = self._parse_agreement_number(text)
			agreement_year = self._parse_agreement_period(text)
			customers = self._parse_customers(text)

			# 3. –ü–∞—Ä—Å–∏–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
			allowed_deviation, deviation_errors = self._parse_allowed_deviation(text)

			# 4. –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã
			for i, table in enumerate(tables):
				if not table or len(table) < 2:
					continue

				# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
				customer_name, customer_errors = self._determine_customer_for_table(
					tables_count=len(tables),
					table_index=i,
					customers=customers
				)

				validation_errors.extend(customer_errors)

				table_data = table.get('data')
				if table_data:
					table_plans = self._parse_table_data(table_data, year, customer_name)
					plans.extend(table_plans)

			# 5. –í–∞–ª–∏–¥–∞—Ü–∏—è
			if not customers:
				validation_errors.append("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

			if not agreement_number:
				validation_errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å–æ–≥–ª–∞—à–µ–Ω–∏—è")

			if not agreement_year:
				validation_errors.append("–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

			if not plans:
				validation_errors.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã —Å –ø–ª–∞–Ω–∞–º–∏ –∑–∞–∫—É–ø–æ–∫ –Ω–∞ {year} –≥–æ–¥")

			# 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
			return DocumentCreate(
				file_path=src,
				agreement_number=agreement_number or "* –ë–µ–∑ –Ω–æ–º–µ—Ä–∞",
				customer_names=customers or ["* –ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"],
				year=year,
				allowed_deviation=allowed_deviation,
				validation_errors=validation_errors,
				plans=plans
			)

		except Exception as e:
			return DocumentCreate(
				file_path=src,
				agreement_number="* –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞",
				customer_names=["* –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"],
				year=get_current_year(),
				allowed_deviation="* 0",
				validation_errors=[str(e)],
				plans=[]
			)

	def _parse_customers(self, text: str) -> list[str] | None:
		"""
		–ü–∞—Ä—Å–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π.
		–£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∞—è —Å–∫–æ–±–∫–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å:
		–∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫—Ä—É–≥–ª–æ–π —Å–∫–æ–±–∫–∏ –¥–æ –∑–∞–ø—è—Ç–æ–π/–∏–º–µ–Ω—É–µ–º.
		"""
		# 1. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
		block_match = re.search(r'(.*?)(?=–Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º:|1\.)', text, re.DOTALL | re.IGNORECASE)
		if not block_match:
			return

		search_text = block_match.group(1)

		# 2. –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫
		search_text = re.sub(r'([¬´"\'`][^¬ª"\'`]*)\n([^¬ª"\'`]*[¬ª"\'`])', r'\1 \2', search_text)

		# 3. –Æ—Ä. —Ñ–æ—Ä–º—ã
		patterns = "|".join(re.escape(p) for p in settings.LEGAL_ENTITY_PATTERNS)

		# 4. –ë–µ—Ä—ë–º —É—á–∞—Å—Ç–æ–∫ –æ—Ç —é—Ä.—Ñ–æ—Ä–º—ã –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞ "–∏–º–µ–Ω—É–µ–º"
		regex = re.compile(rf'({patterns})([^,\n]*?)(?=[_,]|\b–∏–º–µ–Ω—É–µ–º\b)', re.IGNORECASE | re.DOTALL)
		matches = [m.group().strip() for m in regex.finditer(search_text)]

		# 5. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å (–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è), –∏–Ω–∞—á–µ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
		customers = [part.strip(" )") for m in matches for part in [m.split("(")[-1].strip()]]

		# 6. –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
		customers = [
			name for name in customers
			if not any(exc.lower() in name.lower() for exc in settings.EXCLUDE_NAME_LIST)
		]

		return customers

	def _determine_customer_for_table(
			self,
			tables_count: int,
			table_index: int,
			customers: list[str]
	) -> tuple[Optional[str], list[str]]:
		"""
		–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
		"""
		errors = []

		if tables_count == 1:
			# –û–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ - –¥–ª—è –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
			return None, errors

		# –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü - –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
		customer_idx = min(table_index, len(customers) - 1)

		if customers and customer_idx < len(customers):
			return customers[customer_idx], errors
		else:
			# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
			customer_name = f"* –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {table_index + 1}"
			errors.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_index + 1}")
			return customer_name, errors

	def _parse_tables_to_plans(self, tables: list[list[list[str]]], year: int, customers: list[str]) -> list[
		ProductPlanCreate]:
		"""
		–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.
		"""
		plans = []

		for i, table in enumerate(tables):
			if not table or len(table) < 2:
				continue

			# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
			if len(tables) == 1:
				# –ï—Å–ª–∏ –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ - –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
				customer_name = None
			else:
				# –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü - –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
				customer_idx = min(i, len(customers) - 1)
				customer_name = customers[customer_idx] if customers else f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å {i + 1}"

			table_plans = self._parse_table_data(table, year, customer_name)
			plans.extend(table_plans)

		return plans

	def _find_all_tables(self, text: str) -> list[list[list[str]]]:
		"""
		–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ 2. –∏ 3.
		TODO: —Å–∫–ª–µ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ —Ä–µ–∑–∞–Ω–∞—è –Ω–∞ –¥–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –¢–æ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ!
		"""
		tables = []

		# –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –º–µ–∂–¥—É 2. –∏ 3.
		table_blocks = re.findall(r'2\.(.*?)3\.', text, re.DOTALL | re.IGNORECASE)

		for block in table_blocks:
			table = self._extract_table_from_block(block)
			if table and len(table) > 1:  # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ
				tables.append(table)

		return tables

	def _parse_table_data(
			self,
			table: list[list[str]],
			year: int,
			customer_name: str
	) -> list[ProductPlanCreate]:
		"""
		–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º.
		"""
		plans = []

		if not table or len(table) < 2:
			return plans

		# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
		for row in table[1:]:
			if not row or not any(cell.strip() for cell in row):
				continue

			# –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
			month = self._parse_month_from_cell(row[0], year)
			if month is None:
				continue

			# –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
			total_quantity = 0
			for quantity_str in row[1:]:
				quantity = self._parse_quantity(quantity_str)
				if quantity is not None:
					total_quantity += quantity

			if total_quantity > 0:
				plans.append(ProductPlanCreate(
					month=month,
					year=year,
					planned_quantity=total_quantity,
					customer_name=customer_name,
				))

		return plans

	def _process_numeric_columns(self, cells: list[str], product_names: list[str]) -> list[tuple[str, Optional[float]]]:
		"""
		–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–∏–π —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
		"""
		quantities = []
		numeric_values = []

		# –ü–∞—Ä—Å–∏–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		for cell in cells:
			quantity = self._parse_quantity(cell)
			numeric_values.append(quantity)

		if not numeric_values:
			return []

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
		should_skip_last = self._should_skip_last_column(numeric_values)

		# –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		for i, quantity in enumerate(numeric_values):
			if should_skip_last and i == len(numeric_values) - 1:
				continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É

			product_idx = min(i, len(product_names) - 1)
			product_name = product_names[product_idx] if product_names else f"–ü—Ä–æ–¥—É–∫—Ç {i + 1}"

			quantities.append((product_name, quantity))

		return quantities

	def _should_skip_last_column(self, values: list[Optional[float]]) -> bool:
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–∏.
		"""
		if len(values) <= 1:
			return False

		# –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
		valid_values = [v for v in values if v is not None]

		if len(valid_values) < 2:
			return False

		# –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
		sum_without_last = sum(valid_values[:-1])
		last_value = valid_values[-1]

		# –£—Å–ª–æ–≤–∏–µ 1: —Å—É–º–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
		if sum_without_last == 0:
			return False

		# –£—Å–ª–æ–≤–∏–µ 2: —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (—Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
		is_equal = abs(sum_without_last - last_value) < 0.01  # –î–æ–ø—É—Å–∫ –¥–ª—è float

		# –£—Å–ª–æ–≤–∏–µ 3: —Ü–µ–ª—ã–µ —á–∞—Å—Ç–∏ —Ä–∞–≤–Ω—ã (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏)
		is_int_equal = (int(sum_without_last) == int(last_value)) if all(v == int(v) for v in valid_values) else False

		# –£—Å–ª–æ–≤–∏–µ 4: –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∏—Å–ª–∞–º–∏
		has_multiple_columns = len(valid_values) > 1

		return (is_equal or is_int_equal) and has_multiple_columns

	def _extract_table(self, lines: list[str], start_idx: int) -> list[list[str]]:
		"""
		–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫.
		"""
		table = []
		i = start_idx

		# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
		header = self._split_table_row(lines[i])
		if header:
			table.append(header)
			i += 1

		# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
		while i < len(lines):
			line = lines[i].strip()
			if not line:
				i += 1
				continue

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∞—Å—Ç—å—é —Ç–∞–±–ª–∏—Ü—ã (—Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ –∏–ª–∏ –º–µ—Å—è—Ü—ã)
			if self._is_table_row(line):
				row = self._split_table_row(line)
				if row:
					table.append(row)
				i += 1
			else:
				# –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ —Ç–∞–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
				break

		return table if len(table) > 1 else []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ

	def _extract_table_from_block(self, block: str) -> list[list[str]]:
		"""
		–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞.
		"""
		table = []
		lines = block.split('\n')

		for line in lines:
			line = line.strip()
			if not line:
				continue

			# –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —è—á–µ–π–∫–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
			cells = self._split_table_row(line)
			if cells:
				table.append(cells)

		return table

	def _split_table_row(self, line: str) -> list[str]:
		"""
		–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —è—á–µ–π–∫–∏.
		–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
		"""
		# –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –µ–¥–∏–Ω—ã–π
		normalized_line = re.sub(r'[|\t;]+', '  ', line.strip())

		# –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 2+ –ø—Ä–æ–±–µ–ª–∞–º (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã)
		cells = re.split(r'\s{2,}', normalized_line)

		# –û—á–∏—â–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —è—á–µ–π–∫–∏
		cleaned_cells = []
		for cell in cells:
			cell = cell.strip()
			# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–æ–∫—Ä—É–≥ —á–∏—Å–µ–ª
			cell = re.sub(r'^\D*|\D*$', '', cell)
			if cell:
				cleaned_cells.append(cell)

		return cleaned_cells

	def _is_table_row(self, line: str) -> bool:
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç—Ä–æ–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã.
		–ò—â–µ—Ç —á–∏—Å–ª–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –∏–ª–∏ —Ç–∏–ø–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
		"""
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª
		has_numbers = bool(re.search(r'\d', line))
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—è—Ü–µ–≤
		has_months = any(month in line.lower() for month in self.month_map.keys())
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ —Ç–∞–±–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
		has_table_pattern = bool(re.search(r'.*\d.*\d.*\d', line))  # –•–æ—Ç—è –±—ã 3 —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ

		return has_numbers or has_months or has_table_pattern

	def _parse_month_from_cell(self, cell: str, year: int) -> Optional[int]:
		"""
		–ü–∞—Ä—Å–∏—Ç –º–µ—Å—è—Ü –∏–∑ —è—á–µ–π–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞.
		"""
		cell_lower = cell.lower().strip()

		# –§–æ—Ä–º–∞—Ç: –Ø–Ω–≤–∞—Ä—å get_current_year(), –ê–ø—Ä–µ–ª—å 2025–≥., –∞–ø—Ä–µ–ª—å 2025–≥.
		for month_name, month_num in self.month_map.items():
			if month_name in cell_lower:
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–æ–¥–∞ –≤ —è—á–µ–π–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
				year_match = re.search(r'20\d{2}\s*–≥?\.?', cell_lower)
				if year_match:
					year_str = re.sub(r'\D', '', year_match.group())
					cell_year = int(year_str) if year_str else year
					if cell_year != year:
						return None  # –ì–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
				return month_num

		# –§–æ—Ä–º–∞—Ç: —è–Ω–≤., —Ñ–µ–≤.
		month_abbr_map = {
			'—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
			'–∏—é–ª': 7, '–∞–≤–≥': 8, '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
		}

		for abbr, month_num in month_abbr_map.items():
			if abbr in cell_lower:
				return month_num

		# –§–æ—Ä–º–∞—Ç: 01 –∏–ª–∏ 1
		month_match = re.search(r'\b([1-9]|1[0-2])\b', cell_lower)
		if month_match:
			try:
				month = int(month_match.group(1))
				if 1 <= month <= 12:
					return month
			except ValueError:
				pass

		return None

	def _parse_quantity(self, quantity_str: str) -> Optional[float]:
		"""
		–ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.
		"""
		if not quantity_str or quantity_str.strip() == '':
			return None

		try:
			# –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç–æ–π –∏ –º–∏–Ω—É—Å–∞
			cleaned = re.sub(r'[^\d,.\-]', '', quantity_str.replace(' ', ''))

			# –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è float –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
			cleaned = cleaned.replace(',', '.')

			# –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
			if not cleaned:
				return None

			return float(cleaned)
		except (ValueError, TypeError):
			return None

	def _parse_agreement_number(self, text: str) -> str | None:
		"""
		–ò—â–µ—Ç –Ω–æ–º–µ—Ä –¥–æ–ø. –°–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ—Ä–∞–∑–æ–π '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï'.
		"""
		lines = text.split('\n')
		for line in lines:
			if line.strip().upper().startswith('–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï'):
				# –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã
				match = re.search(r'–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï\s+–°–û–ì–õ–ê–®–ï–ù–ò–ï\s*(?:‚Ññ|No|#)?\s*(\S+)', line, re.IGNORECASE)
				if match:
					return match.group(1).strip()

	def _parse_agreement_period(self, text: str) -> str | None:
		"""
		–ò—â–µ—Ç –≥–æ–¥—ã –∏–∑ –ø–µ—Ä–∏–æ–¥–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ 1. –∏ 2.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
		"""

		# –ò—â–µ–º –±–ª–æ–∫ –º–µ–∂–¥—É 1. –∏ 2.
		block_match = re.search(r'1\.(.*?)2\.', text, re.DOTALL)
		if not block_match:
			return

		search_block = block_match.group(1)

		# –ò—â–µ–º –≤—Å–µ –≥–æ–¥–∞ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
		year_matches = re.findall(r'20\d{2}', search_block)
		if year_matches:
			# –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
			return year_matches[-1]

	def _find_table_by_pattern(self, text: str, pattern: str) -> Optional[list[list[str]]]:
		"""
		–ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.
		"""
		lines = text.split('\n')
		for i, line in enumerate(lines):
			if re.search(pattern, line, re.IGNORECASE):
				table = self._extract_table(lines, i)
				if table:
					return table
		return None

	def _parse_allowed_deviation(self, text: str) -> tuple[Optional[str], list[str]]:
		"""
		–ü–∞—Ä—Å–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ 4. –∏ 5.
		–ë–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç % –µ—Å–ª–∏ –µ—Å—Ç—å.
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –æ—à–∏–±–∫–∏).
		"""
		validation_errors = []

		# –ò—â–µ–º –±–ª–æ–∫ –º–µ–∂–¥—É 4. –∏ 5.
		block_match = re.search(r'4\.(.*?)5\.', text, re.DOTALL | re.IGNORECASE)
		if not block_match:
			validation_errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
			return "* 0", validation_errors

		search_block = block_match.group(1)

		# –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
		deviation_pattern = r'(\d+)\s*%?'
		matches = re.findall(deviation_pattern, search_block)

		if not matches:
			validation_errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
			return "* 0", validation_errors

		# –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ
		last_number = matches[-1]

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
		percent_match = re.search(r'{}\s*%'.format(re.escape(last_number)), search_block)
		if percent_match:
			return f"{last_number}%", validation_errors
		else:
			return last_number, validation_errors

	@staticmethod
	def format_status(validation_errors: list[str], is_exist: bool, update_mode: bool) -> str:
		"""–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""

		# –í–∞–ª–∏–¥–∞—Ü–∏—è
		if validation_errors:
			validation = f"[red]{len(validation_errors)} –æ—à–∏–±–∫–∞[/red]"
		else:
			validation = "[green]OK[/green]"

		if is_exist:
			if update_mode:
				action = " ([blue]–û–±–Ω–æ–≤–ª–µ–Ω[/blue])"
			else:
				action = " ([yellow]–ü—Ä–æ–ø—É—â–µ–Ω[/yellow])"
		else:
			action = ""

		return f"{validation} {action}"
