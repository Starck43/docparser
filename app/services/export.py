from datetime import datetime
from pathlib import Path
from typing import Optional, TYPE_CHECKING

from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.hyperlink import Hyperlink

from app.config import settings
from app.crud import get_documents_with_grouped_plans, get_documents_count
from app.db import get_db
from app.utils.base import format_string_list, get_localized_months_list
from app.utils.console import print_success, print_error, print_warning, console
from app.utils.files import get_export_file_path, cleanup_existing_files, get_unique_filename

if TYPE_CHECKING:
	from app.models import Document


def export_documents_to_file(
		year: int,
		output_dir: Path,
		rows_per_file: int = settings.MAX_DOCUMENTS_PER_EXPORT_FILE,
		force_update: bool = settings.REWRITE_FILE_ON_CONFLICT,
		offset: Optional[int] = None,
		limit: Optional[int] = None,
		title: str = "–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
) -> tuple[list[Path], int]:
	"""
	–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ XLSX —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏.

	Args:
		year: –ì–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
		output_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		rows_per_file: –°–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (0 = –≤—Å–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª)
		force_update: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
		offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∫–∏
		limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
		title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

	Returns:
		(export_paths, total_exported)
	"""

	console.print("=" * len(title), style="blue")
	console.print(title.upper(), style="bold blue")
	console.print("=" * len(title) + '\n', style="blue")

	output_dir.mkdir(exist_ok=True)
	export_paths: list[Path] = []
	total_exported = 0
	current_offset = offset or 0
	part_num = 1

	with next(get_db()) as db:
		# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –¥–µ–ª–∞–µ–º COUNT –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
		if limit is not None or (offset is not None and offset > 0):
			total = get_documents_count(db, year=year)

			if not total:
				print_warning(f"–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {year} –≥–æ–¥!")
				return [], 0

			if current_offset >= total:
				print_error(f"–°–º–µ—â–µ–Ω–∏–µ {current_offset} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({total})")
				return [], 0

			if limit is None:
				limit = total - current_offset

		# –ï—Å–ª–∏ rows_per_file == 0 ‚Üí –≤—Å—ë –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
		effective_rows_per_file = rows_per_file or (limit if limit else 0)

		while True:
			# –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
			batch_size = (
				min(effective_rows_per_file, limit - total_exported)
				if limit
				else effective_rows_per_file
			)

			batch_docs = get_documents_with_grouped_plans(
				db,
				year=year,
				skip=current_offset,
				limit=batch_size if batch_size > 0 else None,
			)

			if not batch_docs:
				break

			# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ rows_per_file
			chunks = (
				[batch_docs[i:i + effective_rows_per_file] for i in range(0, len(batch_docs), effective_rows_per_file)]
				if effective_rows_per_file and len(batch_docs) > effective_rows_per_file
				else [batch_docs]
			)

			for i, chunk in enumerate(chunks, 1):
				if not chunk:
					continue

				postfix = (
					f"-part{part_num}"
					if (rows_per_file and (limit is None or limit > rows_per_file)) or len(chunks) > 1
					else ""
				)

				export_path = export_plans_to_xls(
					list(chunk),
					year,
					output_dir,
					postfix,
					force_update,
				)

				if not export_path:
					print_error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
					break

				console.print(
					f"{part_num}: [cyan bold]{export_path}[/cyan bold] "
					f"(–∑–∞–ø–∏—Å–µ–π: {len(chunk)})"
				)

				export_paths.append(export_path)
				total_exported += len(chunk)
				part_num += 1

				if limit and total_exported >= limit:
					break

			current_offset += len(batch_docs)

			if limit and total_exported >= limit:
				break

	# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	if export_paths:
		if len(export_paths) > 1:
			console.print(f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: [cyan bold]{len(export_paths)}[/cyan bold]")

		console.print("\n" + "=" * 80, style="dim")
		print_success("–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
		console.print(f"\n–í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: [cyan bold]{total_exported}[/cyan bold]")
		console.print("üìÇ –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã XLSX:", style="dim")
		for path in export_paths:
			console.print(f"   - [blue][link={path}]{path}[/link][/blue]")

		console.print("=" * 80, style="dim")

	return export_paths, total_exported


def export_plans_to_xls(
		documents: list[tuple['Document', dict[str, list[float | None]]]],
		year: int,
		export_dir: Optional[Path] = None,
		postfix: str = "",
		force_overwrite: bool = False
) -> Path:
	"""
	–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ XLS —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º.
	"""

	# –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
	wb = Workbook()
	ws = wb.active
	ws.title = f"{year}"

	# –£–±–∏—Ä–∞–µ–º —Å–µ—Ç–∫—É –ª–∏—Å—Ç–∞
	ws.sheet_view.showGridLines = False

	# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	ws['A1'] = f"–°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º –∑–∞ {year} –≥–æ–¥"
	ws['A1'].font = Font(bold=True, size=18)

	# –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
	creation_date = datetime.now().strftime("%d.%m.%Y %H:%M")
	ws['A2'] = f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {creation_date}"
	ws['A2'].font = Font(italic=True)

	# –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ–º —Å 4 —Å—Ç—Ä–æ–∫–∏)
	headers = [
		"–§–∞–π–ª",
		"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
		"‚Ññ —Å–æ–≥–ª.",
		"–ì–æ–¥",
		*get_localized_months_list(),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—Ü–µ–≤
		"–ò—Ç–æ–≥–æ",
		"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (-)",
		"–û—à–∏–±–∫–∏"
	]

	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —á–µ—Ç–≤–µ—Ä—Ç—É—é —Å—Ç—Ä–æ–∫—É
	for col_num, header in enumerate(headers, 1):
		col_letter = get_column_letter(col_num)
		cell = ws[f"{col_letter}4"]
		cell.value = header
		cell.font = Font(bold=True)
		cell.alignment = Alignment(vertical='center')

		# –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
		if col_num == 1:  # –§–∞–π–ª
			cell.alignment = Alignment(horizontal='left')
		elif col_num in [2, 3]:  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã, ‚Ññ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
			cell.alignment = Alignment(horizontal='left')
		elif col_num == 4:  # –ì–æ–¥
			cell.alignment = Alignment(horizontal='left')
		elif 5 <= col_num <= 16:  # –ú–µ—Å—è—Ü—ã 01-12
			cell.alignment = Alignment(horizontal='right')
		elif col_num == 17:  # –ò—Ç–æ–≥–æ
			cell.alignment = Alignment(horizontal='right')
		elif col_num == 18:  # +/-
			cell.alignment = Alignment(horizontal='center')
		elif col_num == 19:  # –û—à–∏–±–∫–∏
			cell.alignment = Alignment(horizontal='left')

	# –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å—Ç—Ä–æ–∫–∏)
	row_num = 5

	for doc_item in documents:
		# –†–ê–ó–ë–ò–†–ê–ï–ú –ö–û–†–¢–ï–ñ: (document, summary)
		if isinstance(doc_item, tuple) and len(doc_item) == 2:
			document, summary = doc_item
		else:
			# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
			document = doc_item
			summary = {}

		# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
		file_path_obj = Path(document.file_path) if isinstance(document.file_path, str) else document.file_path
		file_name = file_path_obj.name

		customer_names = format_string_list(document.customer_names, default_text="–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

		base_data = {
			"file_path": str(document.file_path),
			"customer_names": customer_names,
			"agreement_number": document.agreement_number,
			"year": document.year,
			"allowed_deviation": document.allowed_deviation,
			"validation_errors": format_string_list(document.validation_errors)
		}

		# –°—É–º–º–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –º–µ—Å—è—Ü–∞–º –ò–ó SUMMARY (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
		monthly_totals = [0.0] * 12
		if summary:
			# –°—É–º–º–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
			for customer_plans in summary.values():
				for month_idx, value in enumerate(customer_plans):
					if value is not None:
						monthly_totals[month_idx] += value
		else:
			# –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
			if hasattr(document, 'plans'):
				for plan in document.plans:
					if 1 <= plan.month <= 12 and plan.planned_quantity is not None:
						month_index = plan.month - 1
						monthly_totals[month_index] += plan.planned_quantity

		# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ —Ñ–∞–π–ª–∞ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É (–∫–æ–ª–æ–Ω–∫–∞ A)
		cell = ws[f'A{row_num}']
		cell.value = "üìÑ"
		cell.hyperlink = Hyperlink(
			display=f"–ò—Å—Ç–æ—á–Ω–∏–∫ {file_name}",
			ref=f"A{row_num}",
			target=str(document.file_path),
			tooltip=f"–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {file_name}"
		)
		cell.font = Font(color="0000FF", underline='single')
		cell.alignment = Alignment(horizontal='left', vertical='center')

		# –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
		ws[f'B{row_num}'] = base_data["customer_names"]
		ws[f'B{row_num}'].alignment = Alignment(horizontal='left', vertical='top', wrap_text=True)

		ws[f'C{row_num}'] = base_data["agreement_number"]
		ws[f'C{row_num}'].alignment = Alignment(horizontal='left')

		ws[f'D{row_num}'] = base_data["year"]
		ws[f'D{row_num}'].alignment = Alignment(horizontal='left')

		# –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º (–∫–æ–ª–æ–Ω–∫–∏ E-P)
		total_quantity = 0
		for month_idx, month_value in enumerate(monthly_totals):
			month_col = get_column_letter(5 + month_idx)  # –ö–æ–ª–æ–Ω–∫–∏ E-P (5-16)
			value = month_value if month_value != 0 else None
			cell = ws[f'{month_col}{row_num}']
			cell.value = value
			cell.alignment = Alignment(horizontal='center')
			total_quantity += month_value

		# –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (–∫–æ–ª–æ–Ω–∫–∞ Q)
		total_cell = ws[f'Q{row_num}']
		total_cell.value = total_quantity if total_quantity != 0 else None
		total_cell.alignment = Alignment(horizontal='right')
		total_cell.font = Font(bold=True)

		# –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–æ–ª–æ–Ω–∫–∏ R-S)
		ws[f'R{row_num}'] = base_data["allowed_deviation"]
		ws[f'R{row_num}'].alignment = Alignment(horizontal='center')

		ws[f'S{row_num}'] = base_data["validation_errors"]
		ws[f'S{row_num}'].alignment = Alignment(horizontal='left', vertical='top', wrap_text=True)

		# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
		for col_num in range(1, 20):  # –ö–æ–ª–æ–Ω–∫–∏ A-S
			col_letter = get_column_letter(col_num)
			cell = ws[f'{col_letter}{row_num}']
			cell.border = Border(
				left=Side(style='thin'),
				right=Side(style='thin'),
				bottom=Side(style='thin')
			)

		# –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∫—Ä–∞—Å–∏–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤ –∫—Ä–∞—Å–Ω—ã–π
		if document.validation_errors:
			red_font = Font(color="FF0000")
			for col_letter in ['B', 'C', 'D', 'Q', 'R', 'S']:
				ws[f'{col_letter}{row_num}'].font = red_font
			for month_col in range(5, 17):
				ws[f'{get_column_letter(month_col)}{row_num}'].font = red_font

		row_num += 1

	# –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	column_widths = {}
	for column in ws.columns:
		max_length = 0
		column_letter = get_column_letter(column[0].column)
		for cell in column:
			try:
				if cell.value and len(str(cell.value)) > max_length:
					max_length = len(str(cell.value))
			except:
				pass
		column_widths[column_letter] = min(max_length + 2, 15)

	# –û—Å–æ–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã
	column_widths['A'] = 6
	column_widths['B'] = 45
	column_widths['C'] = 10
	column_widths['D'] = 6
	column_widths['Q'] = 10
	column_widths['R'] = 6
	column_widths['S'] = 20

	for col_letter, width in column_widths.items():
		ws.column_dimensions[col_letter].width = width

	# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —à–∞–ø–∫–∏
	for col_num in range(1, 20):
		col_letter = get_column_letter(col_num)
		cell = ws[f'{col_letter}4']
		cell.border = Border(
			left=Side(style='medium'),
			right=Side(style='medium'),
			top=Side(style='medium'),
			bottom=Side(style='medium')
		)

	# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	export_dir = export_dir or Path("export")
	export_dir.mkdir(parents=True, exist_ok=True)

	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ part-—Ñ–∞–π–ª—ã
	base_filename = f"export_plans_{year}"
	if force_overwrite:
		export_file_path, part_files = get_export_file_path(export_dir, base_filename, postfix)

		# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		cleanup_existing_files(export_file_path, part_files, force_overwrite)

	else:
		# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º force_overwrite
		export_file_path = get_unique_filename(
			export_dir,
			base_filename,
			postfix,
			".xlsx"
		)

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	wb.save(export_file_path)

	return export_file_path
