from datetime import datetime
from pathlib import Path
from typing import Optional

from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.hyperlink import Hyperlink

from app.config import settings
from app.models import Document, DocumentCreate
from app.utils.base import get_unique_filename, format_string_list


def export_to_xls_with_months(
		documents: list[Document | DocumentCreate],
		year: int,
		export_dir: Optional[Path] = None,
		postfix: str = "",
		force_overwrite: bool = False
) -> Path:
	"""
	–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ XLS —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º.
	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ step5_view_documents.
	"""

	export_directory = export_dir or settings.EXPORT_DIR

	# –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
	wb = Workbook()
	ws = wb.active
	ws.title = f"{year}"

	# –£–±–∏—Ä–∞–µ–º —Å–µ—Ç–∫—É –ª–∏—Å—Ç–∞
	ws.sheet_view.showGridLines = False

	# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	ws['A1'] = f"–°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º –∑–∞ {year} –≥–æ–¥"
	ws['A1'].font = Font(bold=True, size=18)

	# –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
	creation_date = datetime.now().strftime("%d.%m.%Y %H:%M")
	ws['A2'] = f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {creation_date}"
	ws['A2'].font = Font(italic=True)

	# –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ–º —Å 4 —Å—Ç—Ä–æ–∫–∏)
	headers = [
		"–§–∞–π–ª",
		"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
		"‚Ññ —Å–æ–≥–ª.",
		"–ì–æ–¥",
		*[f"{i:02d}" for i in range(1, 13)],  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—Ü–µ–≤ 01-12
		"–ò—Ç–æ–≥–æ",
		"+/-",
		"–û—à–∏–±–∫–∏"
	]

	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —á–µ—Ç–≤–µ—Ä—Ç—É—é —Å—Ç—Ä–æ–∫—É
	for col_num, header in enumerate(headers, 1):
		col_letter = get_column_letter(col_num)
		cell = ws[f"{col_letter}4"]
		cell.value = header
		cell.font = Font(bold=True)
		cell.alignment = Alignment(vertical='center')

		# –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
		if col_num == 1:  # –§–∞–π–ª
			cell.alignment = Alignment(horizontal='left')
		elif col_num in [2, 3]:  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã, ‚Ññ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
			cell.alignment = Alignment(horizontal='left')
		elif col_num == 4:  # –ì–æ–¥
			cell.alignment = Alignment(horizontal='left')
		elif 5 <= col_num <= 16:  # –ú–µ—Å—è—Ü—ã 01-12
			cell.alignment = Alignment(horizontal='center')
		elif col_num == 17:  # –ò—Ç–æ–≥–æ
			cell.alignment = Alignment(horizontal='right')
		elif col_num == 18:  # +/-
			cell.alignment = Alignment(horizontal='center')
		elif col_num == 19:  # –û—à–∏–±–∫–∏
			cell.alignment = Alignment(horizontal='left')

	# –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å—Ç—Ä–æ–∫–∏)
	row_num = 5

	for doc in documents:
		# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
		if not hasattr(doc, 'plans') or not doc.plans:
			continue

		# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
		file_path_obj = Path(doc.file_path) if isinstance(doc.file_path, str) else doc.file_path
		file_name = file_path_obj.name

		customer_names = format_string_list(doc.customer_names, default_text="–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

		base_data = {
			"file_path": str(doc.file_path),
			"customer_names": customer_names,
			"agreement_number": doc.agreement_number,
			"year": doc.year,
			"allowed_deviation": doc.allowed_deviation,
			"validation_errors": format_string_list(doc.validation_errors)
		}

		# –°—É–º–º–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –º–µ—Å—è—Ü–∞–º (–∫–∞–∫ –≤ step5_view_documents)
		monthly_totals = [0.0] * 12
		for plan in doc.plans:
			if 1 <= plan.month <= 12 and plan.planned_quantity is not None:
				month_index = plan.month - 1
				monthly_totals[month_index] += plan.planned_quantity

		# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ —Ñ–∞–π–ª–∞ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É (–∫–æ–ª–æ–Ω–∫–∞ A)
		cell = ws[f'A{row_num}']
		cell.value = "üìÑ"
		cell.hyperlink = Hyperlink(
			display=f"–ò—Å—Ç–æ—á–Ω–∏–∫ {file_name}",
			ref=f"A{row_num}",
			target=str(doc.file_path),
			tooltip=f"–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {file_name}"
		)
		cell.font = Font(color="0000FF", underline='single')
		cell.alignment = Alignment(horizontal='left', vertical='center')

		# –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
		ws[f'B{row_num}'] = base_data["customer_names"]  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
		ws[f'B{row_num}'].alignment = Alignment(horizontal='left', vertical='top', wrap_text=True)

		ws[f'C{row_num}'] = base_data["agreement_number"]
		ws[f'C{row_num}'].alignment = Alignment(horizontal='left')

		ws[f'D{row_num}'] = base_data["year"]
		ws[f'D{row_num}'].alignment = Alignment(horizontal='left')

		# –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º (–∫–æ–ª–æ–Ω–∫–∏ E-P)
		total_quantity = 0
		for month_idx, month_value in enumerate(monthly_totals):
			month_col = get_column_letter(5 + month_idx)  # –ö–æ–ª–æ–Ω–∫–∏ E-P (5-16)
			value = month_value if month_value != 0 else None
			cell = ws[f'{month_col}{row_num}']
			cell.value = value
			cell.alignment = Alignment(horizontal='center')
			total_quantity += month_value

		# –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (–∫–æ–ª–æ–Ω–∫–∞ Q)
		total_cell = ws[f'Q{row_num}']
		total_cell.value = total_quantity if total_quantity != 0 else None
		total_cell.alignment = Alignment(horizontal='right')
		total_cell.font = Font(bold=True)  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∏—Ç–æ–≥–æ

		# –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–æ–ª–æ–Ω–∫–∏ R-S)
		ws[f'R{row_num}'] = base_data["allowed_deviation"]
		ws[f'R{row_num}'].alignment = Alignment(horizontal='center')

		ws[f'S{row_num}'] = base_data["validation_errors"]
		ws[f'S{row_num}'].alignment = Alignment(horizontal='left', vertical='top', wrap_text=True)

		# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
		for col_num in range(1, 20):  # –ö–æ–ª–æ–Ω–∫–∏ A-S
			col_letter = get_column_letter(col_num)
			cell = ws[f'{col_letter}{row_num}']
			cell.border = Border(
				left=Side(style='thin'),
				right=Side(style='thin'),
				bottom=Side(style='thin')
			)

		# –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∫—Ä–∞—Å–∏–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤ –∫—Ä–∞—Å–Ω—ã–π
		if doc.validation_errors:
			red_font = Font(color="FF0000")
			for col_letter in ['B', 'C', 'D', 'Q', 'R', 'S']:
				ws[f'{col_letter}{row_num}'].font = red_font
			for month_col in range(5, 17):
				ws[f'{get_column_letter(month_col)}{row_num}'].font = red_font

		row_num += 1

	# –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
	column_widths = {}
	for column in ws.columns:
		max_length = 0
		column_letter = get_column_letter(column[0].column)
		for cell in column:
			try:
				if cell.value and len(str(cell.value)) > max_length:
					max_length = len(str(cell.value))
			except:
				pass
		column_widths[column_letter] = min(max_length + 2, 15)

	# –û—Å–æ–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã
	column_widths['A'] = 6  # –§–∞–π–ª (–∏–∫–æ–Ω–∫–∞)
	column_widths['B'] = 45  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
	column_widths['C'] = 10  # ‚Ññ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
	column_widths['D'] = 6  # –ì–æ–¥
	column_widths['Q'] = 10  # –ò—Ç–æ–≥–æ
	column_widths['R'] = 6  # +/-
	column_widths['S'] = 20  # –û—à–∏–±–∫–∏

	for col_letter, width in column_widths.items():
		ws.column_dimensions[col_letter].width = width

	# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —à–∞–ø–∫–∏
	for col_num in range(1, 20):
		col_letter = get_column_letter(col_num)
		cell = ws[f'{col_letter}4']
		cell.border = Border(
			left=Side(style='medium'),
			right=Side(style='medium'),
			top=Side(style='medium'),
			bottom=Side(style='medium')
		)

	# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å postfix
	timestamp = datetime.now().strftime("%d-%m-%Y")
	base_filename = f"export_{year}_{timestamp}{postfix}"

	# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
	export_file_path = get_unique_filename(
		export_directory,
		base_filename,
		postfix,
		".xlsx",
		force_overwrite=settings.REWRITE_FILE_ON_CONFLICT or force_overwrite
	)

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	wb.save(export_file_path)

	print(f"[INFO] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {export_file_path}")
	return export_file_path
