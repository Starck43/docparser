from pathlib import Path
from typing import TYPE_CHECKING

from app.config import settings
from app.utils.base import is_supported
from app.utils.console import print_success, print_error, console


def find_files(directory: Path, limit: int = 0) -> list[Path]:
	"""–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
	files = []

	for ext in settings.SUPPORTED_FORMATS:
		pattern = f"**/*{ext}"
		found = list(directory.glob(pattern))
		files.extend(found)

	files = [f for f in files if is_supported(f)]

	if limit > 0:
		return files[:limit]
	return files


def display_files_tree(source: Path, max_display: int = 10) -> list[Path]:
	"""–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
	files = find_files(source)

	if not files:
		print_error("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return []

	console.print(f"\nüìÅ {source.name.upper()}/", style="bold")
	for i, file in enumerate(files[:max_display], 1):
		prefix = "‚îú‚îÄ‚îÄ" if i < len(files) and i < max_display else "‚îî‚îÄ‚îÄ"
		console.print(f"{prefix} üìÑ [cyan]{file.name}[cyan]")

	if len(files) > max_display:
		console.print(f"‚îî‚îÄ‚îÄ ... –∏ –µ—â–µ [cyan]{len(files) - max_display}[/cyan] —Ñ–∞–π–ª–æ–≤")

	print_success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: [cyan]{len(files)}[/cyan]\n")
	return files
