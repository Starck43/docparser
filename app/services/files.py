from pathlib import Path
from typing import Optional

from app.config import settings
from app.utils.base import get_current_year, is_supported
from app.utils.files import find_files
from app.utils.tables import extract_from_pdf, extract_from_docx, extract_from_txt
from app.utils.console import print_success, print_error, console


def display_files_tree(source: Path, max_display: int = settings.CONSOLE_OUTPUT_BATCH_SIZE) -> list[Path]:
	"""–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
	files = find_files(source)

	if not files:
		print_error("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return []

	console.print(f"\nüìÅ {source.name.upper()}/", style="bold")
	for i, file in enumerate(files[:max_display], 1):
		console.print(f"‚îú‚îÄ‚îÄ üìÑ [gray]{file.name}[/gray]")

	if len(files) > max_display:
		console.print(f"‚îî‚îÄ‚îÄ ... –∏ –µ—â–µ [gray]{len(files) - max_display}[/gray] —Ñ–∞–π–ª–æ–≤")

	print_success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: [cyan]{len(files)}[/cyan]\n")
	return files


def convert_file_to_text(file_path: Path, year: int = None) -> tuple[str, Optional[list[list[list[str]]]]]:
	"""
	–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ñ–∞–π–ª–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –≥–æ–¥—É –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤–∏–¥—É:
	[[MM.YYYY, —Å—É–º–º–∞], ...]

	Args:
		file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
		year: –ì–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫

	Returns:
		tuple:
			- text_content (str): –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
			- results (list[list[str]] | None): —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –≤–∏–¥–∞ [–¥–∞—Ç–∞, —Å—É–º–º–∞]
	"""
	if not file_path.exists():
		print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path} [–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º]")
		return "", None

	if not is_supported(file_path):
		print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path} [–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º]")
		return "", None

	file_ext = file_path.suffix.lower()

	if not year:
		year = get_current_year()

	try:
		if file_ext == ".pdf":
			return extract_from_pdf(file_path, year)
		elif file_ext in [".docx", ".doc"]:
			return extract_from_docx(file_path, year)
		elif file_ext == ".txt":
			return extract_from_txt(file_path, year)
		else:
			raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}")
	except Exception as e:
		raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_path.name}: {e}")
