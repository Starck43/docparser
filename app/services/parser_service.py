from pathlib import Path
from typing import Optional, TYPE_CHECKING

from app.crud import save_document
from app.db import get_db
from app.services.document_parser import DocumentParser

if TYPE_CHECKING:
	from app.models import DocumentCreate


def parse_files(
		files: list[Path],
		year: Optional[int] = None,
		save_to_db: bool = True,
		batch_size: int = 5
) -> list['DocumentCreate']:
	"""
	–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DocumentParser
	"""
	parser = DocumentParser()
	documents = []
	processed = 0

	for i, file_path in enumerate(files, 1):
		try:
			# –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
			document = parser.parse_document(file_path)

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if year is not None and document.year != year:
				continue

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			if save_to_db:
				with next(get_db()) as db:
					save_document(db, document)

			documents.append(document)
			processed += 1

			# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è batch_size
			if processed <= batch_size:
				print(f"üìã [{i}/{len(files)}] –û–±—Ä–∞–±–æ—Ç–∞–Ω: {file_path.name}")
				if hasattr(document, 'agreement_number') and document.agreement_number:
					print(f"   üìÑ –î–æ–≥–æ–≤–æ—Ä: {document.agreement_number}")

		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
			continue

	if processed > batch_size:
		print(f"üìä ... –ø—Ä–æ–ø—É—â–µ–Ω–æ {processed - batch_size} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

	return documents
