from pathlib import Path
from typing import Optional, TYPE_CHECKING

from app.config import settings
from app.crud import save_document
from app.db import get_db
from app.services.document_parser import DocumentParser
from app.utils.base import is_supported
from app.utils.cli_utils import print_warning, print_success, print_error, console

if TYPE_CHECKING:
	from app.models import Document


def find_files(directory: Path, limit: int = 0) -> list[Path]:
	"""–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
	files = []

	for ext in settings.SUPPORTED_FORMATS:
		pattern = f"**/*{ext}"
		found = list(directory.glob(pattern))
		files.extend(found)

	files = [f for f in files if is_supported(f)]

	if limit > 0:
		return files[:limit]
	return files


def display_files_tree(source: Path, max_display: int = 10) -> list[Path]:
	"""–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
	files = find_files(source)

	if not files:
		print_error("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return []

	console.print(f"\nüìÅ {source.name.upper()}/", style="bold")
	for i, file in enumerate(files[:max_display], 1):
		prefix = "‚îú‚îÄ‚îÄ" if i < len(files) and i < max_display else "‚îî‚îÄ‚îÄ"
		console.print(f"{prefix} üìÑ [cyan]{file.name}[cyan]")

	if len(files) > max_display:
		console.print(f"‚îî‚îÄ‚îÄ ... –∏ –µ—â–µ [cyan]{len(files) - max_display}[/cyan] —Ñ–∞–π–ª–æ–≤")

	print_success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: [cyan]{len(files)}[/cyan]\n")
	return files


def parse_files(
		files: list[Path],
		year: Optional[int] = None,
		save_to_db: bool = True,
		batch_size: int = settings.CONSOLE_OUTPUT_BATCH_SIZE
) -> list['Document']:
	"""–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DocumentParser."""
	parser = DocumentParser()
	documents = []
	processed = 0

	for i, file_path in enumerate(files, 1):
		try:
			# –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
			document = parser.parse_document(file_path)

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if year is not None and document.year != year:
				print_warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç {file_path.name} (–≥–æ–¥ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {document.year})")
				continue

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			if save_to_db:
				with next(get_db()) as db:
					document = save_document(db, document)

			documents.append(document)
			processed += 1

			# –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			info_text = f"[{i}/{len(files)}]: {file_path.name}"

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
			has_errors = bool(document.validation_errors)
			status_text = "[red]ERR[/red]" if has_errors else "[green]OK[/green]"

			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
			error_info = ""
			if has_errors:
				error_count = len(document.validation_errors)
				error_info = f" ([orange]{error_count} –æ—à–∏–±–æ–∫[/orange])"

			# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–≤—ã—Ö N
			if has_errors or processed <= batch_size:
				console.print(f"{info_text} ... {status_text}{error_info}")

				# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
				if has_errors:
					for error in document.validation_errors:
						console.print(f"   ‚ö†Ô∏è  [yellow]{error}[/yellow]")

			# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏
			elif i == len(files) and processed > batch_size:
				console.print(f"üìä ... + –µ—â–µ {processed - batch_size} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
				console.print(f"{info_text} ... {status_text}{error_info}")

		except Exception as e:
			print_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
			continue

	return documents
