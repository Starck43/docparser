from pathlib import Path

import typer
from rich.console import Console
from rich.table import Table

from app.config import settings

console = Console()


def print_success(message: str) -> None:
	"""–ü–µ—á–∞—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
	console.print(f"‚úÖ  [green]{message}[/green]")


def print_error(message: str) -> None:
	"""–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
	console.print(f"‚ùå [red]{message}[/red]")


def print_warning(message: str) -> None:
	"""–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
	console.print(f"‚ö†Ô∏è  [yellow]{message}[/yellow]")


def print_table(title: str, **columns: str) -> Table:
	"""–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""

	table = Table(title=title)
	for col_name, col_style in columns.items():
		table.add_column(col_name, style=col_style)
	return table


def confirm_prompt(message: str, default: bool = True) -> bool:
	"""–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ –¥/–Ω"""

	choices = "–î/–Ω" if default else "–¥/–ù"
	prompt = f"{message} [{choices}]: "

	while True:
		try:
			choice = console.input(prompt).lower().strip()
			if not choice:  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Enter
				return default  # <-- This should return the default value
			if choice in ['–¥', '–¥–∞', 'y', 'yes']:
				return True
			elif choice in ['–Ω', '–Ω–µ—Ç', 'n', 'no']:
				return False
			else:
				console.print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥' –∏–ª–∏ '–Ω'", style="red")
		except (KeyboardInterrupt, EOFError):
			console.print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style="red")
			raise typer.Abort()


def input_path(prompt: str, default: Path = settings.DATA_DIR) -> Path:
	"""–ó–∞–ø—Ä–æ—Å –ø—É—Ç–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
	console.print(f"{prompt} [cyan]{default.absolute()}[/cyan]", style="bold")
	custom_input = console.input("üîç –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
	return Path(custom_input or default)


def select_directory(default_dir: Path, create_if_not_exists: bool = False) -> Path | None:
	"""–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

	custom_path = input_path("–¢–µ–∫—É—â–∏–π –ø—É—Ç—å:", default_dir)
	if not custom_path.exists():
		print_error("–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
		if create_if_not_exists and confirm_prompt("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É?", default=True):
			custom_path.mkdir(parents=True, exist_ok=True)
			return custom_path

		return

	return custom_path
