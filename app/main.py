import json
from pathlib import Path
from typing import Optional

import typer
from sqlmodel import Session

from app.config import settings
from app.db import engine
from app.services.document_parser import parse_document_file
from app.services.utils import find_documents, safe_move_file
from . import crud, models

app = typer.Typer(help="–ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–ª–∞–Ω–∞–º–∏ –∑–∞–∫—É–ø–æ–∫")


def _print_document_info(document_data: models.DocumentCreate):
	"""–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ."""
	typer.echo(f"\nüìÑ {document_data.agreement_number or '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞'}")
	if document_data.customer_name:
		typer.echo(f"   üë• {document_data.customer_name}")

	if document_data.plans:
		typer.echo(f"   üìä –ü–ª–∞–Ω–æ–≤: {len(document_data.plans)}")

	if document_data.validation_errors:
		typer.echo(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∏: {len(document_data.validation_errors)}")


@app.command()
def parse_folder(
		folder_path: Path = typer.Argument(settings.DATA_DIR, help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"),
		output_dir: Path = typer.Option(settings.OUTPUT_DIR, help="–ü–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
		max_files: int = typer.Option(settings.MAX_FILES_TO_PROCESS, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
):
	"""
	–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
	"""
	with Session(engine) as db:
		files_processed = 0
		for file_path in find_documents(folder_path):
			if settings.MAX_FILES_TO_PROCESS and files_processed >= max_files:
				break

			try:
				# –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
				document_data = parse_document_file(file_path)
				if not document_data:
					typer.echo(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {file_path.name}")
					continue

				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
				existing = crud.get_document_by_file_path(db, str(file_path))
				if existing:
					typer.echo(f"–î–æ–∫—É–º–µ–Ω—Ç {file_path.name} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
					continue

				crud.create_document(db, document_data)

				# –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
				if output_dir:
					new_path = safe_move_file(file_path, output_dir / file_path.name)
					typer.echo(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {file_path.name} -> {new_path.name}")

				# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
				_print_document_info(document_data)

				files_processed += 1

			except Exception as e:
				typer.echo(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}", err=True)


@app.command()
def show_documents(
		year: Optional[int] = typer.Option(None, help="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É"),
		limit: int = typer.Option(settings.CONSOLE_OUTPUT_BATCH_SIZE, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
		skip: int = typer.Option(0, help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–µ N –∑–∞–ø–∏—Å–µ–π")
):
	"""
	–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≥–æ–¥—É.
	"""
	with Session(engine) as db:
		documents = crud.get_documents_with_plans(db, year=year, skip=skip, limit=limit)

		for doc in documents:
			customers = json.loads(doc.customer_names) if doc.customer_names else []
			customer_str = " –∏ ".join(customers) if customers else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
			typer.echo(f"\n{doc.agreement_number or '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞'} ({doc.year}): {customer_str}")

			for plan in doc.plans:
				typer.echo(f"  {plan.month:02d}.{plan.year}: {plan.planned_quantity} —Ç - {plan.product_name}")


if __name__ == "__main__":
	app()
