from pathlib import Path

from rich.progress import Progress, TextColumn, BarColumn

from app.config import settings
from app.crud import create_document, update_document, get_document_by_slug, bulk_save_documents
from app.db import get_db
from app.models import DocumentCreate
from app.services.files import convert_file_to_text
from app.services.parser import DocumentParser
from app.utils.base import format_string_list
from app.utils.console import console, print_error


def parse_files_pipeline(
    files: list[Path],
    year: int,
    save_to_db: bool = True,
    update_mode: bool = False,
    use_bulk: bool = True,
) -> int:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å Progress, –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–¥—Å—á—ë—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """

    parser = DocumentParser()
    bulk_buffer: list[DocumentCreate] = []
    processed = skipped = updated = 0
    flush_size = settings.BATCH_FLUSH_SIZE

    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TextColumn(" {task.completed}/{task.total}"),
        console=console,
        transient=True,
    ) as progress:
        task = progress.add_task("üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...", total=len(files))

        for i, file_path in enumerate(files, 1):
            try:
                # –≠—Ç–∞–ø 1. –ß—Ç–µ–Ω–∏–µ
                data = convert_file_to_text(file_path)
                if not data or not data[0]:
                    skipped += 1
                    progress.advance(task)
                    continue

                # –≠—Ç–∞–ø 2. –ü–∞—Ä—Å–∏–Ω–≥
                document_data = parser.parse_document(str(file_path.name), data=data, year=year)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–Ω—ã (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                if not document_data.plans:
                    status = parser.format_status(document_data.validation_errors, True, False)
                    console.print(f"[{i:03d}/{len(files)}]: [grey]{file_path.name}[/grey] ... {status}")
                    skipped += 1
                    progress.advance(task)
                    continue

                # –≠—Ç–∞–ø 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
                with next(get_db()) as db:
                    existing_doc = get_document_by_slug(db, document_data.slug)

                    if existing_doc:
                        if update_mode:
                            if save_to_db and not use_bulk:
                                document_data = update_document(db, existing_doc.id, document_data)
                            updated += 1
                        else:
                            status = parser.format_status(document_data.validation_errors, True, update_mode)
                            console.print(f"[{i:03d}/{len(files)}]: [grey]{file_path.name}[/grey] ... {status}")
                            skipped += 1
                            progress.advance(task)
                            continue
                    else:
                        if save_to_db and not use_bulk:
                            document_data = create_document(db, document_data)

                    # Bulk —Ä–µ–∂–∏–º ‚Äî –∫–æ–ø–∏–º –≤ –±—É—Ñ–µ—Ä
                    if save_to_db and use_bulk:
                        bulk_buffer.append(document_data)

                        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –ë–î
                        if len(bulk_buffer) >= flush_size:
                            with next(get_db()) as db:
                                bulk_save_documents(db, bulk_buffer, update_mode=update_mode)
                            bulk_buffer.clear()

                processed += 1

                # –≠—Ç–∞–ø 4. –°—Ç–∞—Ç—É—Å –≤ –∫–æ–Ω—Å–æ–ª—å
                status = parser.format_status(document_data.validation_errors, bool(existing_doc), update_mode)
                console.print(f"[{i:03d}/{len(files)}]: [gray]{file_path.name}[/gray] ... {status}")

                if document_data.validation_errors:
                    console.print(
                        f"          ‚ö†Ô∏è  [red]{format_string_list(document_data.validation_errors, separator=', ')}[/red]"
                    )

            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
                skipped += 1

            progress.advance(task)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ)
        if save_to_db and use_bulk and bulk_buffer:
            with next(get_db()) as db:
                bulk_save_documents(db, bulk_buffer, update_mode=update_mode)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.print("\n" + "=" * 50, style="dim")
    console.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", style="bold")
    console.print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(files)}")
    console.print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    console.print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
    console.print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    console.print("=" * 50, style="dim")

    return processed
