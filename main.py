from app.config import settings
from app.crud import get_documents
from app.db import get_db
from app.services.export import export_to_xls_with_months
from app.services.files import display_files_tree
from app.services.parser import main_file_parser
from app.utils.base import get_current_year
from app.utils.console import (confirm_prompt, console, print_success, print_warning, select_directory, print_error)

try:
	import questionary

	HAS_QUESTIONARY = True
except ImportError:
	import questionary

	HAS_QUESTIONARY = False
	print_warning(
		"–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: pip install questionary"
	)


def run_parsing() -> int:
	"""–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
	console.print("üíæ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏:", style="bold")
	data_dir = select_directory(settings.DATA_DIR, create_if_not_exists=False)
	if not data_dir:
		return 0

	files = display_files_tree(data_dir)
	if not files:
		return 0

	if not confirm_prompt("–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤?", default=True):
		return 0

	return main_file_parser(files, year=get_current_year())


def run_preview():
	with next(get_db()) as db:
		target_year = get_current_year()
		documents = get_documents(db, year=target_year)

		if not documents:
			print_error(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {target_year} –≥–æ–¥")
			return

		from app.services.preview import preview_export_data
		console.print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {target_year} –≥–æ–¥", style="green")
		preview_export_data(list(documents), target_year)
		return


def run_export():
	"""–í—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥"""
	console.print("üíæ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", style="bold")
	export_dir = select_directory(settings.EXPORT_DIR, create_if_not_exists=True)
	if not export_dir:
		return

	year = get_current_year()
	with next(get_db()) as db:
		documents = get_documents(db, year=year)
		if not documents:
			print_warning(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {year} –≥–æ–¥")
			return

		export_path = export_to_xls_with_months(list(documents), year, export_dir)
		abs_path = export_path.absolute()

		print_success(f"–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: [cyan]{len(documents)}[/cyan]")

		console.print("\n" + "=" * 80, style="dim")
		console.print("üìÇ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", style="bold")
		console.print(f"üìç [link=file://{abs_path}]{abs_path}[/link]", style="blue underline")
		console.print("=" * 80, style="dim")


def main():
	console.print("\n" + "=" * 80, style="dim")
	console.print("üìÑ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", style="bold green")
	console.print("=" * 80, style="dim")

	while True:
		# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å questionary (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
		if HAS_QUESTIONARY:
			choice = questionary.select(
				"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
				choices=[
					questionary.Choice("üìÅ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤", value="parse"),
					questionary.Choice("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", value="preview"),
					questionary.Choice("üñ• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", value="export"),
					questionary.Choice("üö™ –í—ã–π—Ç–∏", value="exit")
				],
				pointer="üëâ"
			).ask()
		else:
			# –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ questionary –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
			console.print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", style="bold")
			console.print("1. üìÅ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤")
			console.print("2. üñ• –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
			console.print("3. üìä –í—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
			console.print("4. üö™ –í—ã–π—Ç–∏")

			choice_map = {"1": "parse", "2": "preview", "3": "export", "4": "exit"}
			choice_input = console.input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
			choice = choice_map.get(choice_input, "")

		if choice == "parse":
			documents_count = run_parsing()

			if documents_count > 0 and confirm_prompt("\n–ñ–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?", default=True):
				run_preview()

		elif choice == "preview":
			run_preview()

		elif choice == "export":
			run_export()

		elif choice == "exit":
			console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
			break

		else:
			print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
			continue

		# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
		if not confirm_prompt("\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é?", default=False):
			console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
			break


if __name__ == "__main__":
	main()
