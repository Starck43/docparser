#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ø–æ—à–∞–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä—Å–µ—Ä–∞
"""
import json
from pathlib import Path

from app import crud
from app.config import settings
from app.db import init_db, get_db
from app.services.document_parser import DocumentParser
from app.services.utils import find_documents, get_current_year, extract_tables_from_pdf, \
	extract_text_from_pdf, print_formatted_table, print_monthly_summary, document_to_document_create


def step1_find_files():
	"""–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏"""
	print("=" * 60)
	print("üîç –®–ê–ì 1: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –¥–∞–Ω–Ω—ã—Ö")
	print("=" * 60)

	# –í—ã–±–æ—Ä –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤
	limit_input = input("–õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö): ").strip()

	try:
		file_limit = int(limit_input) if limit_input else None
	except ValueError:
		print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
		return []

	data_dir = settings.DATA_DIR
	print(f"–ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
	print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {settings.SUPPORTED_FORMATS}")

	if not data_dir.exists():
		print("‚ùå –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
		return []

	files = list(find_documents(data_dir))

	# –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
	if file_limit is not None:
		files = files[:file_limit]
		print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ: {file_limit}): {len(files)}")
	else:
		print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

	for i, file_path in enumerate(files, 1):
		print(f"   {i}. {file_path.name} ({file_path.suffix})")

	return files


def step2_convert_to_text(files):
	"""–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã"""
	print("\n" + "=" * 60)
	print("üìù –®–ê–ì 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã")
	print("=" * 60)

	if not files:
		print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
		return

	for i, file_path in enumerate(files, 1):
		print(f"\nüìÑ –§–∞–π–ª {i}: {file_path.name}")
		print("-" * 40)

		try:
			# 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ç–∞–±–ª–∏—Ü)
			text = extract_text_from_pdf(str(file_path))
			if text:
				preview = text[:300].replace('\n', ' ')
				print(f"   ‚úÖ –¢–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):")
				print(f"   Preview: {preview}...")

			# 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω–æ
			tables = extract_tables_from_pdf(str(file_path))
			print(f"   üìä –¢–∞–±–ª–∏—Ü: {len(tables)}")

			# 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
			for table_idx, table in enumerate(tables, 1):
				print(f"\n   üìã –¢–ê–ë–õ–ò–¶–ê {table_idx}:")
				print_formatted_table(table, f"–¢–ê–ë–õ–ò–¶–ê {table_idx}", max_col_width=50)

		except Exception as e:
			print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


def step4_parse_documents(files, with_save=False):
	"""–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
	print("\n" + "=" * 60)
	print(f"‚öôÔ∏è  –®–ê–ì {4 if with_save else 3}: –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
	print("=" * 60)

	if not files:
		print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
		return

	parser = DocumentParser()

	with next(get_db()) as db:
		for i, file_path in enumerate(files, 1):
			print(f"\nüìÑ –§–∞–π–ª {i}: {file_path.name}")
			print("-" * 40)

			try:
				# –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
				document_data = parser.parse_document(file_path)

				if document_data:
					print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω {'—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î' if with_save else '–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'}!")
					print(f"   –ù–æ–º–µ—Ä: {document_data.agreement_number}")
					print(f"   –ì–æ–¥: {document_data.year}")
					print(f"   –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏: {document_data.customer_names}")

					# –û–¢–û–ë–†–ê–ñ–ê–ï–ú –°–í–Ø–ó–ê–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –ü–õ–ê–ù–û–í –ó–ê–ö–£–ü–û–ö!
					print_monthly_summary(document_data)

					if document_data.allowed_deviation and document_data.allowed_deviation != "* 0":
						print(f"   üìè –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {document_data.allowed_deviation}")
					elif document_data.allowed_deviation == "* 0":
						print(f"   ‚ö†Ô∏è  –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

					if document_data.validation_errors:
						print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∏: {document_data.validation_errors}")

					if with_save:
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
						existing = crud.get_document_by_file_path(db, str(file_path))
						if existing:
							print(f"   ‚è≠Ô∏è  –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ (ID: {existing.id})")
							continue

						# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
						document = crud.create_document(db, document_data)
						print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î —Å ID: {document.id}")

				else:
					print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")

			except Exception as e:
				print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
				import traceback
				traceback.print_exc()


def step5_view_documents():
	"""–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
	print("\n" + "=" * 60)
	print("üìã –®–ê–ì 5: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥")
	print("=" * 60)

	# –í—ã–±–æ—Ä –≥–æ–¥–∞
	year_input = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ): ").strip()

	try:
		year = int(year_input) if year_input else get_current_year()
	except ValueError:
		print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞")
		return

	# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	limit_input = input("–°–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å? (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö): ").strip()

	try:
		limit = int(limit_input) if limit_input else None
	except ValueError:
		print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
		return

	with next(get_db()) as db:
		# –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
		documents_with_plans = crud.get_documents_with_plans(db, year=year, limit=limit)

		print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {year} –≥–æ–¥: {len(documents_with_plans)}")

		for i, (doc, customer_plans) in enumerate(documents_with_plans, 1):
			print(f"\nüìÑ [{i:03d}]: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ {doc.agreement_number or '<–±–µ–∑ –Ω–æ–º–µ—Ä–∞>'}")
			print(f"   ID: {doc.id}")
			print(f"   –§–∞–π–ª: {Path(doc.file_path).name}")
			print(f"   –ì–æ–¥: {doc.year}")

			if doc.customer_names:
				customers = json.loads(doc.customer_names)
				print(f"   –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏: {', '.join(customers)}")

			if doc.allowed_deviation and doc.allowed_deviation != "* 0":
				print(f"   üìè –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {doc.allowed_deviation}")

			if customer_plans:
				# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DocumentCreate –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
				document_data = document_to_document_create(doc, customer_plans)
				print_monthly_summary(document_data)

			if doc.validation_errors:
				errors = json.loads(doc.validation_errors)
				print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∏ (–≤—Å–µ–≥–æ {len(errors)}):")
				for error in errors:
					print(f"      - {error}")


def step6_all_steps():
	"""–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
	print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

	files = step1_find_files()
	if files:
		input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫ —à–∞–≥—É 2...")
		step2_convert_to_text(files)

		input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫ —à–∞–≥—É 4...")
		step4_parse_documents(files, with_save=True)

		input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫ —à–∞–≥—É 5...")
		step5_view_documents()


def step7_documents_with_errors():
	"""–î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
	print("\n" + "=" * 60)
	print("‚ÅâÔ∏è –®–ê–ì 7: –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤ –ë–î")
	print("=" * 60)

	# –í—ã–±–æ—Ä –≥–æ–¥–∞
	year_input = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö –ª–µ—Ç): ").strip()

	try:
		year = int(year_input) if year_input else None
	except ValueError:
		print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞")
		return

	# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	limit_input = input("–°–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å? (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö): ").strip()

	try:
		limit = int(limit_input) if limit_input else None
	except ValueError:
		print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
		return

	with next(get_db()) as db:
		error_docs = crud.get_documents_with_errors(db, year=year, limit=limit)

		year_desc = f"–∑–∞ {year} –≥–æ–¥" if year else "–∑–∞ –≤—Å–µ –≥–æ–¥—ã"
		print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ {year_desc}: {len(error_docs)}")

		for i, doc in enumerate(error_docs, 1):
			print(f"\nüìÑ [{i:03d}]: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ {doc.agreement_number or '<–±–µ–∑ –Ω–æ–º–µ—Ä–∞>'}")
			print(f"   ID: {doc.id}")
			print(f"   –§–∞–π–ª: {Path(doc.file_path).name}")
			print(f"   –ì–æ–¥: {doc.year}")

			if doc.validation_errors:
				errors = json.loads(doc.validation_errors)
				print(f"   ‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):")
				for error in errors:
					print(f"      - {error}")

			if doc.plans:
				print(f"   üìà –ü–ª–∞–Ω–æ–≤: {len(doc.plans)}")


def step8_clear_database():
	"""–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
	print("\n" + "=" * 60)
	print("üßπ –®–ê–ì 8: –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞)")
	print("=" * 60)

	print("1. ‚ùå –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–æ–∫—É–º–µ–Ω—Ç—ã")
	print("2. üìÖ –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ–¥")
	print("3. ‚Ü©Ô∏è  –ù–∞–∑–∞–¥")

	choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()

	with next(get_db()) as db:
		if choice == "1":
			deleted = crud.delete_all_documents(db)
			print(f"üßπ –£–¥–∞–ª–µ–Ω–æ –í–°–ï–• –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {deleted}")

		elif choice == "2":
			year_input = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: ").strip()
			try:
				year = int(year_input)
				deleted = crud.delete_documents_by_year(db, year=year)
				print(f"üßπ –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {year} –≥–æ–¥: {deleted}")
			except ValueError:
				print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞")

		elif choice == "3":
			return
		else:
			print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


def main():
	"""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
	print("üß™ –¢–ï–°–¢–û–í–´–ô –ü–ê–†–°–ï–† –î–û–ö–£–ú–ï–ù–¢–û–í")
	print("=" * 40)

	while True:
		print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
		print("1. üîç –¢–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤")
		print("2. üìù –¢–æ–ª—å–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç")
		print("3. ‚öôÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)")
		print("4. ‚öôÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î)")
		print("5. üìã –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
		print("6. üöÄ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
		print("7. ‚ÅâÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏")
		print("8. üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
		print("\n0. üëã –í—ã—Ö–æ–¥")

		choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-9): ").strip()

		if choice == "1":
			step1_find_files()
		elif choice == "2":
			files = step1_find_files()
			step2_convert_to_text(files)
		elif choice == "3":
			files = step1_find_files()
			step4_parse_documents(files)
		elif choice == "4":
			init_db()
			files = step1_find_files()
			step4_parse_documents(files, with_save=True)
		elif choice == "5":
			step5_view_documents()
		elif choice == "6":
			step6_all_steps()
		elif choice == "7":
			step7_documents_with_errors()
		elif choice == "8":
			step8_clear_database()
		else:
			print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			break

		input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")


if __name__ == "__main__":
	main()
